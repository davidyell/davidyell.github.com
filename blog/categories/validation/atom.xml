<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: validation | Daves dev warblings]]></title>
  <link href="http://jedistirfry.co.uk/blog/categories/validation/atom.xml" rel="self"/>
  <link href="http://jedistirfry.co.uk/"/>
  <updated>2014-08-12T15:58:12+01:00</updated>
  <id>http://jedistirfry.co.uk/</id>
  <author>
    <name><![CDATA[David Yell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dynamic validation in CakePHP]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-09/dynamic-validation/"/>
    <updated>2013-09-12T12:53:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-09/dynamic-validation</id>
    <content type="html"><![CDATA[<h3>The scenario</h3>

<p>You have two different forms which both submit data for the same model. Each of these forms has different fields, but both need to be validated before the data can be saved.</p>

<p>If you setup your model validation normally, both forms will fail to validate as they will be missing fields.</p>

<h3>Solution</h3>

<p>The method that I use to solve this is very simple. You can create two validation arrays and dynamically merge them together as and when you need them.</p>

<p>```php
&lt;?php
// Model/Post.php</p>

<p>/<em>*
 * Setup the default rules here, these rules should be common to both forms
 *
 * @var array $validate
 </em>/</p>

<pre><code>public $validate = array(
    'title' =&gt; array(
        'one' =&gt; array(
            'rule' =&gt; 'notEmpty',
            'message' =&gt; 'Please enter a title',
            'required' =&gt; true
        ),
        'two' =&gt; array(
            'rule' =&gt; array('minLength', 10),
            'message' =&gt; 'Title must be more than 10 characters'
        )
    )
);
</code></pre>

<p>/<em>*
 * Validation rules for when editing a post
 *
 * @var array $validatePost
 </em>/</p>

<pre><code>public $validatePost = array(
    'content' =&gt; array(
        'one' =&gt; array(
            'rule' =&gt; 'notEmpty',
            'message' =&gt; 'Please enter some content',
            'required' =&gt; true
        )
    )
);
</code></pre>

<p>/<em>*
 * Validate Author
 *
 * @var array $validateAuthor
 </em>/</p>

<pre><code>public $validateAuthor = array(
    'author_id' =&gt; array(
        'one' =&gt; array(
            'rule' =&gt; 'notEmpty',
            'message' =&gt; 'Please select an Author',
            'required' =&gt; true
        )
    ),
);
</code></pre>

<p>/<em>*
 * Here we can check some conditions to see what validation we need
 *
 * @return boolean
 </em>/</p>

<pre><code>public function beforeValidate() {
    // We might want to check data
    if (isset($this-&gt;data['Post']['author_id'])) {
        $this-&gt;validate = array_merge($this-&gt;validate, $this-&gt;validateAuthor);
    }

    // Maybe only on an edit action?
    // We know it's edit because there is an id
    if (isset($this-&gt;data['Post']['id'])) {
        $this-&gt;validate = array_merge($this-&gt;validate, $this-&gt;validatePost);
    }

    // Perhaps we want to add a single new rule for add using the validator?
    // We know it's add because there is no id
    if (!isset($this-&gt;data['Post']['id'])) {
        $this-&gt;validator()-&gt;add('pubDate', array(
                'one' =&gt; array(
                    'rule' =&gt; array('datetime', 'ymd'),
                    'message' =&gt; 'Publish date must be ymd'
                )
            )
        )
    }

    return true;
}
</code></pre>

<p>```</p>

<p>So now our validation array will contain a dynamic selection of rules based on conditions we choose. I prefer to use the <code>array_merge()</code> method because I find the validation rules easier to read and maintain.</p>

<p>You can find out more about the <code>validator()</code> in the book. <a href="http://book.cakephp.org/2.0/en/models/data-validation.html#dynamically-change-validation-rules">Dynamically change validation rules</a></p>

<h3>Success</h3>

<p>Go and make a brew, you&rsquo;ve just done some dynamic validation. Right in the model too, exactly where it should be. ggwp.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Only One validation for CakePHP]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-04/onlyone-cake-validation/"/>
    <updated>2013-04-06T00:00:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-04/onlyone-cake-validation</id>
    <content type="html"><![CDATA[<h3>Use case</h3>

<p>You want to set a default for a collection of items and you need to validate that there is only one default set in the collection.</p>

<h3>Setup</h3>

<p>I tend to use a <code>bool NOT NULL DEFAULT 0</code> field for this in the database. Then in my model I&rsquo;ll implement a custom validation function.</p>

<p>```php
&lt;?php
public $validate = array(</p>

<pre><code>    'default' =&gt; array( // Name of the field
        'one' =&gt; array( // The name of the rule
            'rule' =&gt; 'onlyOne', // My custom validation
            'message' =&gt; 'Only one can be default. A default already exists',
            'required' =&gt; false
        )
    )
</code></pre>

<p>);</p>

<p>/<em>*
 * Checks to ensure that only one record has the default flag
 * @param array $check An array containing {field}=>{value}
 * @return bool
 </em>/</p>

<pre><code>public function onlyOne($check) {
    // If turning off default, we don't mind
    if ($check['default'] == 0) {
        return true;
    }

    // Find the current default
    $default = $this-&gt;find('first', array(
        'conditions' =&gt; array(
            'default' =&gt; 1,
        ),
        'fields' =&gt; array('id', 'name')
        ));

    // No default exists
    if (!$default) {
        return true;
    }

    // If we are updating the current default
    if ($default['Model']['id'] == $this-&gt;data['Model']['id']) {
        return true;
    }

    return false;
}
</code></pre>

<p>```</p>

<h3>Success</h3>

<p>Go make a brew!</p>
]]></content>
  </entry>
  
</feed>
