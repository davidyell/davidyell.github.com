<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: data manipulation | Daves dev warblings]]></title>
  <link href="http://jedistirfry.co.uk/blog/categories/data-manipulation/atom.xml" rel="self"/>
  <link href="http://jedistirfry.co.uk/"/>
  <updated>2016-06-14T15:27:10+01:00</updated>
  <id>http://jedistirfry.co.uk/</id>
  <author>
    <name><![CDATA[David Yell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sorting multi-dimension model data]]></title>
    <link href="http://jedistirfry.co.uk/blog/2014-08/sorting-data/"/>
    <updated>2014-08-12T15:42:10+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2014-08/sorting-data</id>
    <content type="html"><![CDATA[<h3>Scenario</h3>

<p>So often you have a large collection of collated data, probably with some calculated fields and you want to sort one of the dimensions by a certain value. Pretty hard using regular array methods, unless you start slicing arrays out of their dimension, sort them and inject them back in. We don&rsquo;t want to do that because it&rsquo;s fiddly.</p>

<h3>Solution</h3>

<p>So the solution I like to use is to use <a href="http://php.net/manual/en/function.usort.php">usort()</a>. Which is a handy function allowing you to sort an array using your own function. Perfect if you want to sort a related models data.</p>

<h3>Example</h3>

<p>So for the example we&rsquo;ll assume that we have a <code>League</code> model which <code>hasMany</code> <code>LeaguesUser</code>. We want to count the number of points a user has and order the data accordingly.</p>

<p>When returned from a Cake <code>find()</code> we&rsquo;ll end up with related data in dimensions.
<code>php
&lt;?php
array (size=2)
  'League' =&gt;
    array (size=9)
      'id' =&gt; string '1' (length=1)
      'name' =&gt; string 'Examples!' (length=9)
      'slug' =&gt; string 'examples' (length=9)
      'description' =&gt; string 'The league for people who like examples' (length=45)
      'cover' =&gt; string '1000x1000.jpg' (length=13)
      'image_dir' =&gt; string '1' (length=1)
      'join_code' =&gt; string 'da39a3ee5e6b4b0d3255bfef95601890afd80709' (length=40)
      'created' =&gt; string '2014-08-04 10:45:45' (length=19)
      'modified' =&gt; string '2014-08-11 14:54:34' (length=19)
  'LeaguesUser' =&gt;
    array (size=2)
      0 =&gt;
        array (size=5)
          'id' =&gt; string '1' (length=1)
          'league_id' =&gt; string '1' (length=1)
          'user_id' =&gt; string '2' (length=1)
          'admin' =&gt; boolean true
          'User' =&gt;
            array (size=5)
              'id' =&gt; string '2' (length=1)
              'email' =&gt; string 'test@example.com' (length=16)
              'username' =&gt; string 'testuser' (length=8)
              'predictions' =&gt; int 2
              'correct' =&gt; int 0
      1 =&gt;
        array (size=5)
          'id' =&gt; string '2' (length=1)
          'league_id' =&gt; string '1' (length=1)
          'user_id' =&gt; string '1' (length=1)
          'admin' =&gt; boolean false
          'User' =&gt;
            array (size=5)
              'id' =&gt; string '1' (length=1)
              'email' =&gt; string 'testuser1@example.com' (length=20)
              'username' =&gt; string 'testuser1' (length=8)
              'predictions' =&gt; int 2
              'correct' =&gt; int 1
</code></p>

<p>So let&rsquo;s sort that <code>LeaguesUser['User']</code> dimension by the number of correct predicitons.</p>

<p>Firstly, we&rsquo;ll want to create a new <code>private function sortByCorrect($a, $b)</code> in our controller. Then we just need to sort using it in our currenct controller method.</p>

<p>The important thing to note is that the callable function passed to <code>usort()</code> is an array containing the current controller as the first item. <code>usort($data, [$this, 'callableFunction'])</code> without including <code>$this</code> you&rsquo;ll get an error.</p>

<pre><code class="php">&lt;?php
public function view($slug) {
    $league = $this-&gt;League-&gt;find('first', [
        'contain' =&gt; [
            'LeaguesUser' =&gt; [
                'User' =&gt; [
                    'fields' =&gt; ['id', 'email', 'username', 'correct', 'predicitons']
                ]
            ]
        ],
        'conditions' =&gt; [
            'League.slug' =&gt; $slug
        ]
    ]);

    usort($league, [$this, 'sortByCorrect']);

    $this-&gt;set('league', $league);
}

private function sortByCorrect($a, $b) {
    if ($a['User']['correct'] &lt; $b['User']['correct']) {
        return 1;
    } elseif ($a['User']['correct'] == $b['User']['correct']) {
        return 0;
    } else {
        return -1;
    }
}

// Rest of controller
</code></pre>

<h3>Done</h3>

<p>Go make a brew! Your work here is done.</p>
]]></content>
  </entry>
  
</feed>
