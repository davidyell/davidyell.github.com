<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: components | Daves dev warblings]]></title>
  <link href="http://jedistirfry.co.uk/blog/categories/components/atom.xml" rel="self"/>
  <link href="http://jedistirfry.co.uk/"/>
  <updated>2016-06-14T15:27:10+01:00</updated>
  <id>http://jedistirfry.co.uk/</id>
  <author>
    <name><![CDATA[David Yell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to use a Component to listen to Cake events]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-08/cake-events-system-listening/"/>
    <updated>2013-08-09T15:29:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-08/cake-events-system-listening</id>
    <content type="html"><![CDATA[<p>I wanted a sleek way to inject SEO meta tags into my project without a large overhead and lots of complicated finds and model joints. Thanks to <a href="https://github.com/lorenzo">jose_zap&rsquo;s</a> suggestion, I decided to learn about the <a href="http://book.cakephp.org/2.0/en/core-libraries/events.html">Cake Events</a> system.</p>

<pre><code class="php">&lt;?php
/**
 * Component to find and load seo data and inject it into the view
 *
 * @author David Yell &lt;neon1024@gmail.com&gt;
 */

App::uses('CakeEventListener', 'Event');
App::uses('CakeEvent', 'Event');

class SeoComponent extends Component implements CakeEventListener {

/**
 * Setup the component
 * Called after the Controller::beforeFilter() and before the controller action
 * 
 * @param Controller $controller
 */
    public function startup(Controller $controller) {
        parent::startup($controller);
        $controller-&gt;getEventManager()-&gt;attach($this);
    }

/**
 * List of callable functions which are attached to system events
 * 
 * @return array
 */
    public function implementedEvents() {
        return array(
            'View.beforeLayout' =&gt; 'writeSeo'
        );
    }

/**
 * Inject the seo data into the view
 * 
 * @param CakeEvent $event
 * @return void
 */
    public function writeSeo(CakeEvent $event) {
        // Looking for vars set to the view isn't especially robust! This should probably call a behaviour method which goes and looks up data
        if (!empty($event-&gt;subject()-&gt;viewVars['content']['Content']['seo_title'])) {
            $event-&gt;subject()-&gt;viewVars['title_for_layout'] = $event-&gt;subject()-&gt;viewVars['content']['Content']['seo_title'];
        }

        if (!empty($event-&gt;subject()-&gt;viewVars['content']['Content']['seo_description'])) {
            $event-&gt;subject()-&gt;Html-&gt;meta('description', $event-&gt;subject()-&gt;viewVars['content']['Content']['seo_description'], array('block' =&gt; 'meta'));
        }

        if (!empty($event-&gt;subject()-&gt;viewVars['content']['Content']['seo_keywords'])) {
            $event-&gt;subject()-&gt;Html-&gt;meta('keywords', $event-&gt;subject()-&gt;viewVars['content']['Content']['seo_keywords'], array('block' =&gt; 'meta'));
        }
    }
}
</code></pre>

<h3>Success</h3>

<p>Make a brew!</p>
]]></content>
  </entry>
  
</feed>
