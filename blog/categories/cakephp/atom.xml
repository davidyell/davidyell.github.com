<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cakephp | Daves dev warblings]]></title>
  <link href="http://jedistirfry.co.uk/blog/categories/cakephp/atom.xml" rel="self"/>
  <link href="http://jedistirfry.co.uk/"/>
  <updated>2014-08-28T17:35:00+01:00</updated>
  <id>http://jedistirfry.co.uk/</id>
  <author>
    <name><![CDATA[David Yell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Sorting multi-dimension model data]]></title>
    <link href="http://jedistirfry.co.uk/blog/2014-08/sorting-data/"/>
    <updated>2014-08-12T15:42:10+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2014-08/sorting-data</id>
    <content type="html"><![CDATA[<h3>Scenario</h3>

<p>So often you have a large collection of collated data, probably with some calculated fields and you want to sort one of the dimensions by a certain value. Pretty hard using regular array methods, unless you start slicing arrays out of their dimension, sort them and inject them back in. We don&rsquo;t want to do that because it&rsquo;s fiddly.</p>

<h3>Solution</h3>

<p>So the solution I like to use is to use <a href="http://php.net/manual/en/function.usort.php">usort()</a>. Which is a handy function allowing you to sort an array using your own function. Perfect if you want to sort a related models data.</p>

<h3>Example</h3>

<p>So for the example we&rsquo;ll assume that we have a <code>League</code> model which <code>hasMany</code> <code>LeaguesUser</code>. We want to count the number of points a user has and order the data accordingly.</p>

<p>When returned from a Cake <code>find()</code> we&rsquo;ll end up with related data in dimensions.
```php
&lt;?php
array (size=2)
  &lsquo;League&rsquo; =></p>

<pre><code>array (size=9)
  'id' =&gt; string '1' (length=1)
  'name' =&gt; string 'Examples!' (length=9)
  'slug' =&gt; string 'examples' (length=9)
  'description' =&gt; string 'The league for people who like examples' (length=45)
  'cover' =&gt; string '1000x1000.jpg' (length=13)
  'image_dir' =&gt; string '1' (length=1)
  'join_code' =&gt; string 'da39a3ee5e6b4b0d3255bfef95601890afd80709' (length=40)
  'created' =&gt; string '2014-08-04 10:45:45' (length=19)
  'modified' =&gt; string '2014-08-11 14:54:34' (length=19)
</code></pre>

<p>  &lsquo;LeaguesUser&rsquo; =></p>

<pre><code>array (size=2)
  0 =&gt; 
    array (size=5)
      'id' =&gt; string '1' (length=1)
      'league_id' =&gt; string '1' (length=1)
      'user_id' =&gt; string '2' (length=1)
      'admin' =&gt; boolean true
      'User' =&gt; 
        array (size=5)
          'id' =&gt; string '2' (length=1)
          'email' =&gt; string 'test@example.com' (length=16)
          'username' =&gt; string 'testuser' (length=8)
          'predictions' =&gt; int 2
          'correct' =&gt; int 0
  1 =&gt; 
    array (size=5)
      'id' =&gt; string '2' (length=1)
      'league_id' =&gt; string '1' (length=1)
      'user_id' =&gt; string '1' (length=1)
      'admin' =&gt; boolean false
      'User' =&gt; 
        array (size=5)
          'id' =&gt; string '1' (length=1)
          'email' =&gt; string 'testuser1@example.com' (length=20)
          'username' =&gt; string 'testuser1' (length=8)
          'predictions' =&gt; int 2
          'correct' =&gt; int 1
</code></pre>

<p>```</p>

<p>So let&rsquo;s sort that <code>LeaguesUser['User']</code> dimension by the number of correct predicitons.</p>

<p>Firstly, we&rsquo;ll want to create a new <code>private function sortByCorrect($a, $b)</code> in our controller. Then we just need to sort using it in our currenct controller method.</p>

<p>The important thing to note is that the callable function passed to <code>usort()</code> is an array containing the current controller as the first item. <code>usort($data, [$this, 'callableFunction'])</code> without including <code>$this</code> you&rsquo;ll get an error.</p>

<p>```php
&lt;?php
public function view($slug) {</p>

<pre><code>$league = $this-&gt;League-&gt;find('first', [
    'contain' =&gt; [
        'LeaguesUser' =&gt; [
            'User' =&gt; [
                'fields' =&gt; ['id', 'email', 'username', 'correct', 'predicitons']
            ]
        ]
    ],
    'conditions' =&gt; [
        'League.slug' =&gt; $slug
    ]
]);

usort($league, [$this, 'sortByCorrect']);

$this-&gt;set('league', $league);
</code></pre>

<p>}</p>

<p>private function sortByCorrect($a, $b) {</p>

<pre><code>if ($a['User']['correct'] &lt; $b['User']['correct']) {
    return 1;
} elseif ($a['User']['correct'] == $b['User']['correct']) {
    return 0;
} else {
    return -1;
}
</code></pre>

<p>}</p>

<p>// Rest of controller
```</p>

<h3>Done</h3>

<p>Go make a brew! Your work here is done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Requiring CakePHP 2.x using Composer]]></title>
    <link href="http://jedistirfry.co.uk/blog/2014-07/converting-your-2-dot-x-application-to-require-cakephp/"/>
    <updated>2014-07-31T15:00:34+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2014-07/converting-your-2-dot-x-application-to-require-cakephp</id>
    <content type="html"><![CDATA[<h3>Scenario</h3>

<p>You have started your project using one of the 2.x downloads. Now you are using Composer to pull in your plugins, but you are still having to commit the framework to your repo.</p>

<p>So it&rsquo;s time to remove your CakePHP lib and start requiring it as a dependancy instead.</p>

<p>I will assume you are fimiliar with <a href="http://getcomposer.org/">Composer</a>.</p>

<h3>Solution</h3>

<p>So it&rsquo;s actually pretty straight forward. For the sake of this example, we will assume that you have a standard layout in your current project.</p>

<p>If you are not familiar with the current layout, <a href="https://github.com/cakephp/cakephp/tree/2.5.3">take a quick look at the 2.5.3 tag</a> to check the folders.</p>

<p>To see what we are aiming at, <a href="https://github.com/FriendsOfCake/app-template">check out the Friends of Cake app-template</a>.</p>

<p>If you don&rsquo;t already have a <code>composer.json</code> file, then you&rsquo;ll want to create that. <code>composer init</code> inside your project folder.</p>

<h4>Adding the framework</h4>

<p>Firstly we want to let Composer know that you want to require the framework, so let&rsquo;s update the <code>composer.json</code> to add the following to your <code>require</code> section.</p>

<p><code>json
"cakephp/cakephp": "2.5.3"
</code></p>

<p>You can pick your version here if you want to lock in the version, which I&rsquo;d recommend. Or you could specify another version, such as <code>2.5.*</code>. <a href="https://getcomposer.org/doc/01-basic-usage.md#package-versions">Check the Composer docs for more on versions</a>.</p>

<p>When you <code>composer update</code> now it should download the framework for you into <code>vendors/cakephp/cakephp</code>.</p>

<h4>Pointing to the correct core</h4>

<p>The next task is to tell CakePHP that we have a new place for it to find the core. There are only really a few files you need to update.</p>

<ul>
<li><code>app/webroot/index.php</code></li>
<li><code>app/Console/cake.php</code></li>
</ul>


<p><strong>app/webroot/index.php</strong><br/>
You&rsquo;ll want to update the <code>ROOT</code>, <code>APP_DIR</code>, <code>TMP</code> and the <code>CAKE_CORE_INCLUDE_PATH</code> constants.</p>

<p><code>php
define('ROOT', dirname(dirname(__FILE__)));
define('APP_DIR', 'app'); // I define this as a string because why not right?
define('TMP', ROOT . DS . 'tmp' . DS);
define('CAKE_CORE_INCLUDE_PATH', ROOT . DS . 'vendor' . DS . 'cakephp' . DS . 'cakephp' . DS . 'lib');
</code></p>

<p><strong>app/Console/cake.php</strong><br/>
So that the console commands can still find the right lib, we need to update the include path here too.</p>

<p><code>php
ini_set('include_path', '..' . $ds . 'vendor' . $ds . 'cakephp' . $ds . 'cakephp' . $ds . 'lib' . PATH_SEPARATOR . ini_get('include_path'));
</code></p>

<p>As you are running your shell tasks from within <code>app</code> we can use a relative path.</p>

<h4>Testing</h4>

<p>To check that the new setup is working you can run a <code>Console/cake</code> to check what the <code>core</code> value is.</p>

<p>```bash
$ cd app
$ Console/cake</p>

<h2>Welcome to CakePHP v2.5.3 Console</h2>

<p>App : app</p>

<h2>Path: /Users/david/Sites/example/app/</h2>

<p>Current Paths:</p>

<p> -app: app
 -working: /Users/david/Sites/example/app
 -root: /Users/david/Sites/example
 -core: /Users/david/Sites/example/vendor/cakephp/cakephp/lib
```</p>

<h3>Done!</h3>

<p>Feel free to delete your old <code>lib</code> folder as you now don&rsquo;t need it. Have fun updating your applications version of CakePHP using Composer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a CakePHP project using Composer]]></title>
    <link href="http://jedistirfry.co.uk/blog/2014-05/cakephp-project-from-scratch-using-composer/"/>
    <updated>2014-05-28T11:47:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2014-05/cakephp-project-from-scratch-using-composer</id>
    <content type="html"><![CDATA[<h3>Scenario</h3>

<p>I want to start a new CakePHP project, but I don&rsquo;t want to download anything. Ideally I want to create my application with the framework as a dependancy.</p>

<h3>Solution</h3>

<p>So firstly you&rsquo;ll want to create yourself a project folder. For this example we&rsquo;ll create a project to adopt a cat.
We need to create ourself a project folder, make it into a Git repo so we can version our code, and then we can start adding our dependancies.</p>

<p><code>bash
$ mkdir KittyMarket
$ cd KittyMarket
$ git init
$ composer init
</code></p>

<p>So after the last command Composer will ask you about your project, so you can complete the details there. Be sure that you set your <code>"minimum-stability": "dev"</code> so that packages loading from <code>dev-master</code> will work.</p>

<p>Then you can start defining your dependancies. Firstly you&rsquo;ll want <code>cakephp/cakephp</code> and set a version of the latest, currently <code>2.5.1</code>.</p>

<p>After this I like to edit my <code>composer.json</code> to add some configuration, so that Composer will put things in the correct CakePHP place.</p>

<p>```json</p>

<pre><code>"config": {
    "vendor-dir": "vendors",
    "bin-dir": "vendors/bin"
}
</code></pre>

<p>```</p>

<p>Once you&rsquo;ve added all your dependancies it&rsquo;s time to make the app. Be aware that the <code>../vendors/bin</code> might be different if you didn&rsquo;t use the above amend to your <code>composer.json</code>.</p>

<p><code>bash
$ mkdir app
$ cd app
$ ../vendors/bin/cake bake
</code></p>

<p>This will copy in the framework skeleton.</p>

<h3>Done!</h3>

<p>Make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Filtering dates using CakeDC/Search]]></title>
    <link href="http://jedistirfry.co.uk/blog/2014-03/filtering-dates-using-cakedc-slash-search/"/>
    <updated>2014-03-04T10:54:00+00:00</updated>
    <id>http://jedistirfry.co.uk/blog/2014-03/filtering-dates-using-cakedc-slash-search</id>
    <content type="html"><![CDATA[<h3>Scenario</h3>

<p>I needed to do a search on a date field in my database which was stored as a <code>DATE</code>, but only filtering by month.</p>

<h3>Solution</h3>

<p>So I had already implemented the <a href="https://github.com/cakedc/search">CakeDC/Search</a> into my project, so all I needed to do was create a custom method to return the right conditions for the query.</p>

<p>My model already had the <code>filterArgs</code> setup.</p>

<p>```php
/<em>*
 * Setup default search filters
 *
 * @var array
 </em>/</p>

<pre><code>public $filterArgs = [
    'day_type_id' =&gt; ['type' =&gt; 'value'],
    'month' =&gt; ['type' =&gt; 'query', 'method' =&gt; 'filterByMonth']
];
</code></pre>

<p>```</p>

<p>So I just added a <code>type</code> of <code>query</code> and passed in a <code>method</code>.</p>

<p>```php
/<strong>
 * Filter the pagination by month
 *
 * @param array $data
 * @return array
 </strong>/</p>

<pre><code>public function filterByMonth(array $data = array()) {
    return [
        "DATE_FORMAT({$this-&gt;alias}.date, '%c')" =&gt; (int)$data['month']
    ];
}
</code></pre>

<p>```</p>

<p>The <code>$data</code> array will contain all the fields setup in your model along with their values. So for me it looked like</p>

<p>```php
[</p>

<pre><code>'day_type_id' =&gt; 3,
'month' =&gt; '08' // Note the string type, hence why I cast to int
</code></pre>

<p>]
```</p>

<h3>Done!</h3>

<p>Make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Pagination Helper links]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-11/custom-pagination/"/>
    <updated>2013-11-27T11:00:00+00:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-11/custom-pagination</id>
    <content type="html"><![CDATA[<h3>Scenario</h3>

<p>You are paginating a set of records but you want to use a custom url for that specific filter. For me this was pagination a set of news articles by category.</p>

<p>The url I wanted to use was <code>/news/category/daves-awesome-category</code> and then paginating results on <code>/news/category/daves-awesome-category/page:3</code>. However the Paginator helper didn&rsquo;t want to play ball.</p>

<p>I had already created my route.</p>

<p><code>php
Router::connect('/news/category/:category/*', array('controller' =&gt; 'news_articles', 'action' =&gt; 'index'), array('category' =&gt; '[a-z0-9-]+', 'pass' =&gt; array('category')));
</code></p>

<p>But instead of the expected links above, I was getting <code>/news/daves-awesome-category/page:2</code> missing out my keyword from the url.</p>

<h3>Solution</h3>

<p>The Paginator helper options array to the rescue! You can actually configure the options of the helper right in the view. Such a simple fix.</p>

<p>Here is my pagination including the fix to adjust the url if a category is set.</p>

<p>```php
if (isset($category)) {</p>

<pre><code>$this-&gt;Paginator-&gt;options['url'] = array('controller' =&gt; 'news_articles', 'action' =&gt; 'index', 'category' =&gt; $category['NewsCategory']['slug']);
</code></pre>

<p>}
echo $this->Paginator->prev(&lsquo;&lt; &rsquo; . <strong>(&lsquo;previous&rsquo;), array(), null, array(&lsquo;class&rsquo; => &lsquo;prev disabled&rsquo;));
echo $this->Paginator->numbers(array(&lsquo;separator&rsquo; => &lsquo;&rsquo;));
echo $this->Paginator->next(</strong>(&lsquo;next&rsquo;) . &lsquo; >&rsquo;, array(), null, array(&lsquo;class&rsquo; => &lsquo;next disabled&rsquo;));
```</p>

<h3>Done!</h3>

<p>Make a brew, and probably have a biscuit too. Why not eh? You&rsquo;ve earned it.</p>
]]></content>
  </entry>
  
</feed>
