<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cakephp | Daves dev warblings]]></title>
  <link href="http://jedistirfry.co.uk/blog/categories/cakephp/atom.xml" rel="self"/>
  <link href="http://jedistirfry.co.uk/"/>
  <updated>2014-07-30T15:55:18+01:00</updated>
  <id>http://jedistirfry.co.uk/</id>
  <author>
    <name><![CDATA[David Yell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating a CakePHP project using Composer]]></title>
    <link href="http://jedistirfry.co.uk/blog/2014-05/cakephp-project-from-scratch-using-composer/"/>
    <updated>2014-05-28T11:47:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2014-05/cakephp-project-from-scratch-using-composer</id>
    <content type="html"><![CDATA[<h3>Scenario</h3>

<p>I want to start a new CakePHP project, but I don&rsquo;t want to download anything. Ideally I want to create my application with the framework as a dependancy.</p>

<h3>Solution</h3>

<p>So firstly you&rsquo;ll want to create yourself a project folder. For this example we&rsquo;ll create a project to adopt a cat.
We need to create ourself a project folder, make it into a Git repo so we can version our code, and then we can start adding our dependancies.</p>

<p><code>bash
$ mkdir KittyMarket
$ cd KittyMarket
$ git init
$ composer init
</code></p>

<p>So after the last command Composer will ask you about your project, so you can complete the details there. Be sure that you set your <code>"minimum-stability": "dev"</code> so that packages loading from <code>dev-master</code> will work.</p>

<p>Then you can start defining your dependancies. Firstly you&rsquo;ll want <code>cakephp/cakephp</code> and set a version of the latest, currently <code>2.5.1</code>.</p>

<p>After this I like to edit my <code>composer.json</code> to add some configuration, so that Composer will put things in the correct CakePHP place.</p>

<p>```json</p>

<pre><code>"config": {
    "vendor-dir": "vendors",
    "bin-dir": "vendors/bin"
}
</code></pre>

<p>```</p>

<p>Once you&rsquo;ve added all your dependancies it&rsquo;s time to make the app. Be aware that the <code>../vendors/bin</code> might be different if you didn&rsquo;t use the above amend to your <code>composer.json</code>.</p>

<p><code>bash
$ mkdir app
$ cd app
$ ../vendors/bin/cake bake
</code></p>

<p>This will copy in the framework skeleton.</p>

<h3>Done!</h3>

<p>Make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Filtering dates using CakeDC/Search]]></title>
    <link href="http://jedistirfry.co.uk/blog/2014-03/filtering-dates-using-cakedc-slash-search/"/>
    <updated>2014-03-04T10:54:00+00:00</updated>
    <id>http://jedistirfry.co.uk/blog/2014-03/filtering-dates-using-cakedc-slash-search</id>
    <content type="html"><![CDATA[<h3>Scenario</h3>

<p>I needed to do a search on a date field in my database which was stored as a <code>DATE</code>, but only filtering by month.</p>

<h3>Solution</h3>

<p>So I had already implemented the <a href="https://github.com/cakedc/search">CakeDC/Search</a> into my project, so all I needed to do was create a custom method to return the right conditions for the query.</p>

<p>My model already had the <code>filterArgs</code> setup.</p>

<p>```php
/<em>*
 * Setup default search filters
 *
 * @var array
 </em>/</p>

<pre><code>public $filterArgs = [
    'day_type_id' =&gt; ['type' =&gt; 'value'],
    'month' =&gt; ['type' =&gt; 'query', 'method' =&gt; 'filterByMonth']
];
</code></pre>

<p>```</p>

<p>So I just added a <code>type</code> of <code>query</code> and passed in a <code>method</code>.</p>

<p>```php
/<strong>
 * Filter the pagination by month
 *
 * @param array $data
 * @return array
 </strong>/</p>

<pre><code>public function filterByMonth(array $data = array()) {
    return [
        "DATE_FORMAT({$this-&gt;alias}.date, '%c')" =&gt; (int)$data['month']
    ];
}
</code></pre>

<p>```</p>

<p>The <code>$data</code> array will contain all the fields setup in your model along with their values. So for me it looked like</p>

<p>```php
[</p>

<pre><code>'day_type_id' =&gt; 3,
'month' =&gt; '08' // Note the string type, hence why I cast to int
</code></pre>

<p>]
```</p>

<h3>Done!</h3>

<p>Make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Pagination Helper links]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-11/custom-pagination/"/>
    <updated>2013-11-27T11:00:00+00:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-11/custom-pagination</id>
    <content type="html"><![CDATA[<h3>Scenario</h3>

<p>You are paginating a set of records but you want to use a custom url for that specific filter. For me this was pagination a set of news articles by category.</p>

<p>The url I wanted to use was <code>/news/category/daves-awesome-category</code> and then paginating results on <code>/news/category/daves-awesome-category/page:3</code>. However the Paginator helper didn&rsquo;t want to play ball.</p>

<p>I had already created my route.</p>

<p><code>php
Router::connect('/news/category/:category/*', array('controller' =&gt; 'news_articles', 'action' =&gt; 'index'), array('category' =&gt; '[a-z0-9-]+', 'pass' =&gt; array('category')));
</code></p>

<p>But instead of the expected links above, I was getting <code>/news/daves-awesome-category/page:2</code> missing out my keyword from the url.</p>

<h3>Solution</h3>

<p>The Paginator helper options array to the rescue! You can actually configure the options of the helper right in the view. Such a simple fix.</p>

<p>Here is my pagination including the fix to adjust the url if a category is set.</p>

<p>```php
if (isset($category)) {</p>

<pre><code>$this-&gt;Paginator-&gt;options['url'] = array('controller' =&gt; 'news_articles', 'action' =&gt; 'index', 'category' =&gt; $category['NewsCategory']['slug']);
</code></pre>

<p>}
echo $this->Paginator->prev(&lsquo;&lt; &rsquo; . <strong>(&lsquo;previous&rsquo;), array(), null, array(&lsquo;class&rsquo; => &lsquo;prev disabled&rsquo;));
echo $this->Paginator->numbers(array(&lsquo;separator&rsquo; => &lsquo;&rsquo;));
echo $this->Paginator->next(</strong>(&lsquo;next&rsquo;) . &lsquo; >&rsquo;, array(), null, array(&lsquo;class&rsquo; => &lsquo;next disabled&rsquo;));
```</p>

<h3>Done!</h3>

<p>Make a brew, and probably have a biscuit too. Why not eh? You&rsquo;ve earned it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic validation in CakePHP]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-09/dynamic-validation/"/>
    <updated>2013-09-12T12:53:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-09/dynamic-validation</id>
    <content type="html"><![CDATA[<h3>The scenario</h3>

<p>You have two different forms which both submit data for the same model. Each of these forms has different fields, but both need to be validated before the data can be saved.</p>

<p>If you setup your model validation normally, both forms will fail to validate as they will be missing fields.</p>

<h3>Solution</h3>

<p>The method that I use to solve this is very simple. You can create two validation arrays and dynamically merge them together as and when you need them.</p>

<p>```php
&lt;?php
// Model/Post.php</p>

<p>/<em>*
 * Setup the default rules here, these rules should be common to both forms
 *
 * @var array $validate
 </em>/</p>

<pre><code>public $validate = array(
    'title' =&gt; array(
        'one' =&gt; array(
            'rule' =&gt; 'notEmpty',
            'message' =&gt; 'Please enter a title',
            'required' =&gt; true
        ),
        'two' =&gt; array(
            'rule' =&gt; array('minLength', 10),
            'message' =&gt; 'Title must be more than 10 characters'
        )
    )
);
</code></pre>

<p>/<em>*
 * Validation rules for when editing a post
 *
 * @var array $validatePost
 </em>/</p>

<pre><code>public $validatePost = array(
    'content' =&gt; array(
        'one' =&gt; array(
            'rule' =&gt; 'notEmpty',
            'message' =&gt; 'Please enter some content',
            'required' =&gt; true
        )
    )
);
</code></pre>

<p>/<em>*
 * Validate Author
 *
 * @var array $validateAuthor
 </em>/</p>

<pre><code>public $validateAuthor = array(
    'author_id' =&gt; array(
        'one' =&gt; array(
            'rule' =&gt; 'notEmpty',
            'message' =&gt; 'Please select an Author',
            'required' =&gt; true
        )
    ),
);
</code></pre>

<p>/<em>*
 * Here we can check some conditions to see what validation we need
 *
 * @return boolean
 </em>/</p>

<pre><code>public function beforeValidate() {
    // We might want to check data
    if (isset($this-&gt;data['Post']['author_id'])) {
        $this-&gt;validate = array_merge($this-&gt;validate, $this-&gt;validateAuthor);
    }

    // Maybe only on an edit action?
    // We know it's edit because there is an id
    if (isset($this-&gt;data['Post']['id'])) {
        $this-&gt;validate = array_merge($this-&gt;validate, $this-&gt;validatePost);
    }

    // Perhaps we want to add a single new rule for add using the validator?
    // We know it's add because there is no id
    if (!isset($this-&gt;data['Post']['id'])) {
        $this-&gt;validator()-&gt;add('pubDate', array(
                'one' =&gt; array(
                    'rule' =&gt; array('datetime', 'ymd'),
                    'message' =&gt; 'Publish date must be ymd'
                )
            )
        )
    }

    return true;
}
</code></pre>

<p>```</p>

<p>So now our validation array will contain a dynamic selection of rules based on conditions we choose. I prefer to use the <code>array_merge()</code> method because I find the validation rules easier to read and maintain.</p>

<p>You can find out more about the <code>validator()</code> in the book. <a href="http://book.cakephp.org/2.0/en/models/data-validation.html#dynamically-change-validation-rules">Dynamically change validation rules</a></p>

<h3>Success</h3>

<p>Go and make a brew, you&rsquo;ve just done some dynamic validation. Right in the model too, exactly where it should be. ggwp.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Merging Admin specific helpers]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-09/merging-admin-specific-helpers/"/>
    <updated>2013-09-10T14:32:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-09/merging-admin-specific-helpers</id>
    <content type="html"><![CDATA[<h3>The scenario</h3>

<p>You have a bunch of helpers which you are only using in the <code>/admin</code> section of your website. We don&rsquo;t need to load these on the front-end part of the site.</p>

<h3>Solution</h3>

<p>```php
&lt;?php
// app/AppController.php</p>

<pre><code>public $helpers = array(
    'Html',
    'Form',
);

public $adminHelpers = array(
    'NiceAdmin.Actions',
    'NiceAdmin.Boolean',
);
</code></pre>

<p>public function beforeFilter() {</p>

<pre><code>if (isset($this-&gt;request-&gt;params['admin'])) {
    $this-&gt;layout = 'admin';
    $this-&gt;helpers = array_merge($this-&gt;helpers, $this-&gt;adminHelpers);
}
</code></pre>

<p>}
```</p>

<h3>Success!</h3>

<p>Make a brew.</p>
]]></content>
  </entry>
  
</feed>
