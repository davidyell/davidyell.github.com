<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Daves dev warblings]]></title>
  <link href="http://jedistirfry.co.uk/atom.xml" rel="self"/>
  <link href="http://jedistirfry.co.uk/"/>
  <updated>2014-07-30T15:45:30+01:00</updated>
  <id>http://jedistirfry.co.uk/</id>
  <author>
    <name><![CDATA[David Yell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating a CakePHP project using Composer]]></title>
    <link href="http://jedistirfry.co.uk/blog/2014-05/cakephp-project-from-scratch-using-composer/"/>
    <updated>2014-05-28T11:47:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2014-05/cakephp-project-from-scratch-using-composer</id>
    <content type="html"><![CDATA[<h3>Scenario</h3>

<p>I want to start a new CakePHP project, but I don&rsquo;t want to download anything. Ideally I want to create my application with the framework as a dependancy.</p>

<h3>Solution</h3>

<p>So firstly you&rsquo;ll want to create yourself a project folder. For this example we&rsquo;ll create a project to adopt a cat.
We need to create ourself a project folder, make it into a Git repo so we can version our code, and then we can start adding our dependancies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir KittyMarket
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>KittyMarket
</span><span class='line'><span class="nv">$ </span>git init
</span><span class='line'><span class="nv">$ </span>composer init
</span></code></pre></td></tr></table></div></figure>


<p>So after the last command Composer will ask you about your project, so you can complete the details there. Be sure that you set your <code>"minimum-stability": "dev"</code> so that packages loading from <code>dev-master</code> will work.</p>

<p>Then you can start defining your dependancies. Firstly you&rsquo;ll want <code>cakephp/cakephp</code> and set a version of the latest, currently <code>2.5.1</code>.</p>

<p>After this I like to edit my <code>composer.json</code> to add some configuration, so that Composer will put things in the correct CakePHP place.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;config&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;vendor-dir&quot;</span><span class="p">:</span> <span class="s2">&quot;vendors&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;bin-dir&quot;</span><span class="p">:</span> <span class="s2">&quot;vendors/bin&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you&rsquo;ve added all your dependancies it&rsquo;s time to make the app. Be aware that the <code>../vendors/bin</code> might be different if you didn&rsquo;t use the above amend to your <code>composer.json</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir app
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>app
</span><span class='line'><span class="nv">$ </span>../vendors/bin/cake bake
</span></code></pre></td></tr></table></div></figure>


<p>This will copy in the framework skeleton.</p>

<h3>Done!</h3>

<p>Make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Filtering dates using CakeDC/Search]]></title>
    <link href="http://jedistirfry.co.uk/blog/2014-03/filtering-dates-using-cakedc-slash-search/"/>
    <updated>2014-03-04T10:54:00+00:00</updated>
    <id>http://jedistirfry.co.uk/blog/2014-03/filtering-dates-using-cakedc-slash-search</id>
    <content type="html"><![CDATA[<h3>Scenario</h3>

<p>I needed to do a search on a date field in my database which was stored as a <code>DATE</code>, but only filtering by month.</p>

<h3>Solution</h3>

<p>So I had already implemented the <a href="https://github.com/cakedc/search">CakeDC/Search</a> into my project, so all I needed to do was create a custom method to return the right conditions for the query.</p>

<p>My model already had the <code>filterArgs</code> setup.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Setup default search filters</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @var array</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>  <span class="k">public</span> <span class="nv">$filterArgs</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>      <span class="s1">&#39;day_type_id&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;value&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s1">&#39;month&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;query&#39;</span><span class="p">,</span> <span class="s1">&#39;method&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;filterByMonth&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I just added a <code>type</code> of <code>query</code> and passed in a <code>method</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Filter the pagination by month</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @param array $data</span>
</span><span class='line'><span class="sd"> * @return array</span>
</span><span class='line'><span class="sd"> **/</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">filterByMonth</span><span class="p">(</span><span class="k">array</span> <span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;DATE_FORMAT(</span><span class="si">{</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">alias</span><span class="si">}</span><span class="s2">.date, &#39;%c&#39;)&quot;</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">int</span><span class="p">)</span><span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;month&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>$data</code> array will contain all the fields setup in your model along with their values. So for me it looked like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;day_type_id&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;month&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;08&#39;</span> <span class="c1">// Note the string type, hence why I cast to int</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Done!</h3>

<p>Make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Pagination Helper links]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-11/custom-pagination/"/>
    <updated>2013-11-27T11:00:00+00:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-11/custom-pagination</id>
    <content type="html"><![CDATA[<h3>Scenario</h3>

<p>You are paginating a set of records but you want to use a custom url for that specific filter. For me this was pagination a set of news articles by category.</p>

<p>The url I wanted to use was <code>/news/category/daves-awesome-category</code> and then paginating results on <code>/news/category/daves-awesome-category/page:3</code>. However the Paginator helper didn&rsquo;t want to play ball.</p>

<p>I had already created my route.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Router</span><span class="o">::</span><span class="na">connect</span><span class="p">(</span><span class="s1">&#39;/news/category/:category/*&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;controller&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;news_articles&#39;</span><span class="p">,</span> <span class="s1">&#39;action&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;index&#39;</span><span class="p">),</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;category&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;[a-z0-9-]+&#39;</span><span class="p">,</span> <span class="s1">&#39;pass&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;category&#39;</span><span class="p">)));</span>
</span></code></pre></td></tr></table></div></figure>


<p>But instead of the expected links above, I was getting <code>/news/daves-awesome-category/page:2</code> missing out my keyword from the url.</p>

<h3>Solution</h3>

<p>The Paginator helper options array to the rescue! You can actually configure the options of the helper right in the view. Such a simple fix.</p>

<p>Here is my pagination including the fix to adjust the url if a category is set.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$category</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Paginator</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">[</span><span class="s1">&#39;url&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;controller&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;news_articles&#39;</span><span class="p">,</span> <span class="s1">&#39;action&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="s1">&#39;category&#39;</span> <span class="o">=&gt;</span> <span class="nv">$category</span><span class="p">[</span><span class="s1">&#39;NewsCategory&#39;</span><span class="p">][</span><span class="s1">&#39;slug&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Paginator</span><span class="o">-&gt;</span><span class="na">prev</span><span class="p">(</span><span class="s1">&#39;&lt; &#39;</span> <span class="o">.</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;previous&#39;</span><span class="p">),</span> <span class="k">array</span><span class="p">(),</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;class&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;prev disabled&#39;</span><span class="p">));</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Paginator</span><span class="o">-&gt;</span><span class="na">numbers</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;separator&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&#39;</span><span class="p">));</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Paginator</span><span class="o">-&gt;</span><span class="na">next</span><span class="p">(</span><span class="nx">__</span><span class="p">(</span><span class="s1">&#39;next&#39;</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39; &gt;&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(),</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;class&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;next disabled&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Done!</h3>

<p>Make a brew, and probably have a biscuit too. Why not eh? You&rsquo;ve earned it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic validation in CakePHP]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-09/dynamic-validation/"/>
    <updated>2013-09-12T12:53:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-09/dynamic-validation</id>
    <content type="html"><![CDATA[<h3>The scenario</h3>

<p>You have two different forms which both submit data for the same model. Each of these forms has different fields, but both need to be validated before the data can be saved.</p>

<p>If you setup your model validation normally, both forms will fail to validate as they will be missing fields.</p>

<h3>Solution</h3>

<p>The method that I use to solve this is very simple. You can create two validation arrays and dynamically merge them together as and when you need them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="c1">// Model/Post.php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Setup the default rules here, these rules should be common to both forms </span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @var array $validate</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>  <span class="k">public</span> <span class="nv">$validate</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;title&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>              <span class="s1">&#39;rule&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;notEmpty&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Please enter a title&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;required&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span>
</span><span class='line'>          <span class="p">),</span>
</span><span class='line'>          <span class="s1">&#39;two&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>              <span class="s1">&#39;rule&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;minLength&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
</span><span class='line'>              <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Title must be more than 10 characters&#39;</span>
</span><span class='line'>          <span class="p">)</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Validation rules for when editing a post</span>
</span><span class='line'><span class="sd"> * </span>
</span><span class='line'><span class="sd"> * @var array $validatePost</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>  <span class="k">public</span> <span class="nv">$validatePost</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;content&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>              <span class="s1">&#39;rule&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;notEmpty&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Please enter some content&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;required&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span>
</span><span class='line'>          <span class="p">)</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Validate Author</span>
</span><span class='line'><span class="sd"> * </span>
</span><span class='line'><span class="sd"> * @var array $validateAuthor</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>  <span class="k">public</span> <span class="nv">$validateAuthor</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;author_id&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>              <span class="s1">&#39;rule&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;notEmpty&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Please select an Author&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;required&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span>
</span><span class='line'>          <span class="p">)</span>
</span><span class='line'>      <span class="p">),</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Here we can check some conditions to see what validation we need</span>
</span><span class='line'><span class="sd"> * </span>
</span><span class='line'><span class="sd"> * @return boolean</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">beforeValidate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// We might want to check data</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;Post&#39;</span><span class="p">][</span><span class="s1">&#39;author_id&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validate</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validateAuthor</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Maybe only on an edit action?</span>
</span><span class='line'>      <span class="c1">// We know it&#39;s edit because there is an id</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;Post&#39;</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validate</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validatePost</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Perhaps we want to add a single new rule for add using the validator?</span>
</span><span class='line'>      <span class="c1">// We know it&#39;s add because there is no id</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;Post&#39;</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validator</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;pubDate&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                  <span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                      <span class="s1">&#39;rule&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;datetime&#39;</span><span class="p">,</span> <span class="s1">&#39;ymd&#39;</span><span class="p">),</span>
</span><span class='line'>                      <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Publish date must be ymd&#39;</span>
</span><span class='line'>                  <span class="p">)</span>
</span><span class='line'>              <span class="p">)</span>
</span><span class='line'>          <span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now our validation array will contain a dynamic selection of rules based on conditions we choose. I prefer to use the <code>array_merge()</code> method because I find the validation rules easier to read and maintain.</p>

<p>You can find out more about the <code>validator()</code> in the book. <a href="http://book.cakephp.org/2.0/en/models/data-validation.html#dynamically-change-validation-rules">Dynamically change validation rules</a></p>

<h3>Success</h3>

<p>Go and make a brew, you&rsquo;ve just done some dynamic validation. Right in the model too, exactly where it should be. ggwp.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Merging Admin specific helpers]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-09/merging-admin-specific-helpers/"/>
    <updated>2013-09-10T14:32:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-09/merging-admin-specific-helpers</id>
    <content type="html"><![CDATA[<h3>The scenario</h3>

<p>You have a bunch of helpers which you are only using in the <code>/admin</code> section of your website. We don&rsquo;t need to load these on the front-end part of the site.</p>

<h3>Solution</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="c1">// app/AppController.php</span>
</span><span class='line'>  <span class="k">public</span> <span class="nv">$helpers</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;Html&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;Form&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nv">$adminHelpers</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;NiceAdmin.Actions&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;NiceAdmin.Boolean&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">beforeFilter</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">params</span><span class="p">[</span><span class="s1">&#39;admin&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">layout</span> <span class="o">=</span> <span class="s1">&#39;admin&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">helpers</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">helpers</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">adminHelpers</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Success!</h3>

<p>Make a brew.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to create hasManyThrough multi-selects]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-08/how-to-create-hasmanythrough-multi-selects/"/>
    <updated>2013-08-13T16:29:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-08/how-to-create-hasmanythrough-multi-selects</id>
    <content type="html"><![CDATA[<p><strong>Updated 6th November 2013</strong></p>

<h3>The scenario</h3>

<p>In your CMS you have a HABTM relationship between two models, something like <code>Post</code> and <code>Tag</code>. However you want to store some extra data about the <code>Tag</code>, such as who created it. This means that the relationship between the two models will in fact need to be a <code>hasManyThrough</code> and use a join model. <a href="http://book.cakephp.org/2.0/en/models/associations-linking-models-together.html#hasmany-through-the-join-model">You can read more about this type of relationship in the CakePHP CookBook</a>.</p>

<p>You want to be able to select and save multiple tags when creating a <code>Post</code>. So the logical step here is to load a list of <code>Tag</code> items and display them in a multi-select element in our view.</p>

<p>The alternative scenario is using checkboxes to add a <code>hasMany</code> relation to a parent record.</p>

<h3>The problem</h3>

<p>When creating a multi-select there is no form field configuration which will allow the data to be formatted in a way which is compatible with any of the <code>save()</code> methods.</p>

<p>For example,
Setting up your form using a multi-select such as <code>$this-&gt;Form-&gt;input('tag_id', array('type' =&gt; 'select', 'multiple' =&gt; true))</code> will not allow you to numerically index your fields. This means that your data will look like the following.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>array (size=1)
</span><span class='line'>  'tag_id' =&gt; 
</span><span class='line'>    array (size=3)
</span><span class='line'>      0 =&gt; string '28' (length=2)
</span><span class='line'>      1 =&gt; string '29' (length=2)
</span><span class='line'>      2 =&gt; string '30' (length=2)</span></code></pre></td></tr></table></div></figure>


<p>However this isn&rsquo;t compatible, and must be transformed into a numerically indexed form such as this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>array (size=3)
</span><span class='line'>  0 =&gt; 
</span><span class='line'>    array (size=1)
</span><span class='line'>      'tag_id' =&gt; string '28' (length=2)
</span><span class='line'>  1 =&gt; 
</span><span class='line'>    array (size=1)
</span><span class='line'>      'tag_id' =&gt; string '29' (length=2)
</span><span class='line'>  2 =&gt; 
</span><span class='line'>    array (size=1)
</span><span class='line'>      'tag_id' =&gt; string '30' (length=2)</span></code></pre></td></tr></table></div></figure>


<p>This new data format can now be assigned to your join model and saved using <code>saveAll()</code>. However the dependency isn&rsquo;t respected and as such, you need the hack for deleting the existing join model records as you can see below.</p>

<h3>Solution</h3>

<h4>The models</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Model/Post.php</span>
</span><span class='line'><span class="nv">$hasMany</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;PostsTag&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;className&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;PostsTag&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;foreignKey&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;post_id&#39;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Model/Tag.php</span>
</span><span class='line'><span class="nv">$hasMany</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;PostsTag&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;className&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;PostsTag&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;foreignKey&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;tag_id&#39;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Model/PostsTag.php</span>
</span><span class='line'><span class="nv">$belongsTo</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;Post&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;className&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Post&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;foreignKey&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;post_id&#39;</span>
</span><span class='line'>  <span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;Tag&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;className&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Tag&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;foreignKey&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;tag_id&#39;</span>
</span><span class='line'>  <span class="p">),</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>The form in the view</h4>

<p>If you want to use a multi-select field here you can use the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Form</span><span class="o">-&gt;</span><span class="na">input</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;PostsTag.tag_id&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;select&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;multiple&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;selected&#39;</span> <span class="o">=&gt;</span> <span class="nx">Hash</span><span class="o">::</span><span class="na">extract</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;PostsTag&#39;</span><span class="p">],</span> <span class="s1">&#39;{n}.tag_id&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you would like to use checkboxes instead you can change the Form Helper to use checkboxes.</p>

<p><strong>Important note</strong><br/>
If you are using checkboxes and want to validate your data you will need to ensure that the <code>hiddenField</code> option is not <strong>false</strong>. Otherwise the data will not appear in the data array and you will not be able to validate it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Form</span><span class="o">-&gt;</span><span class="na">input</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;Post.tag_id&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;multiple&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;checkbox&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;options&#39;</span> <span class="o">=&gt;</span> <span class="nv">$tags</span> <span class="c1">// A list of tags fetched with $this-&gt;Post-&gt;Tag-&gt;find(&#39;list&#39;)</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>The controller except</h4>

<p>Controller method excerpt to show the usage of the function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="c1">// Here we are massaging the data in order to transform it</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;PostsTag&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Post</span><span class="o">-&gt;</span><span class="na">PostsTag</span><span class="o">-&gt;</span><span class="na">massageHasManyForSaveAll</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;PostsTag&#39;</span><span class="p">],</span> <span class="s1">&#39;tag_id&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;Post&#39;</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Post</span><span class="o">-&gt;</span><span class="na">saveAll</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>The AppModel hack</h4>

<p>In the AppModel we need to implement a hack to massage the data. You&rsquo;ll notice that we call it on the join model, as above. This is important as the join model will have the correct relationships beteween the two models. We can use this to our advantage to find out the related keys for the delete.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd">* Transform a set of hasMany multi-select data into a format which can be saved</span>
</span><span class='line'><span class="sd">* using saveAll in the controller</span>
</span><span class='line'><span class="sd">* </span>
</span><span class='line'><span class="sd">* @param array $data</span>
</span><span class='line'><span class="sd">* @param str $fieldToSave</span>
</span><span class='line'><span class="sd">* @param int $deleteId</span>
</span><span class='line'><span class="sd">* @return array</span>
</span><span class='line'><span class="sd">*/</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">massageHasManyForSaveAll</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nv">$fieldToSave</span><span class="p">,</span> <span class="nv">$deleteId</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">belongsTo</span> <span class="k">as</span> <span class="nv">$model</span> <span class="o">=&gt;</span> <span class="nv">$relationship</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nv">$relationship</span><span class="p">[</span><span class="s1">&#39;foreignKey&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="nv">$fieldToSave</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$relatedModel</span> <span class="o">=</span> <span class="nv">$model</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$relatedModelPrimaryKey</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$model</span><span class="p">}</span><span class="o">-&gt;</span><span class="na">primaryKey</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$relatedForeignKey</span> <span class="o">=</span> <span class="nv">$relationship</span><span class="p">[</span><span class="s1">&#39;foreignKey&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$deleteId</span> <span class="o">!==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">deleteAll</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">alias</span> <span class="o">.</span><span class="s1">&#39;.&#39;</span><span class="o">.</span> <span class="nv">$relatedForeignKey</span> <span class="o">=&gt;</span> <span class="nv">$deleteId</span>
</span><span class='line'>      <span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="nv">$fieldToSave</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="nv">$fieldToSave</span><span class="p">]</span> <span class="k">as</span> <span class="nv">$packageId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$return</span><span class="p">[]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nv">$fieldToSave</span> <span class="o">=&gt;</span> <span class="nv">$packageId</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="nv">$return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Success</h3>

<p>Make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use a Component to listen to Cake events]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-08/cake-events-system-listening/"/>
    <updated>2013-08-09T15:29:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-08/cake-events-system-listening</id>
    <content type="html"><![CDATA[<p>I wanted a sleek way to inject SEO meta tags into my project without a large overhead and lots of complicated finds and model joints. Thanks to <a href="https://github.com/lorenzo">jose_zap&rsquo;s</a> suggestion, I decided to learn about the <a href="http://book.cakephp.org/2.0/en/core-libraries/events.html">Cake Events</a> system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Component to find and load seo data and inject it into the view</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @author David Yell &lt;neon1024@gmail.com&gt;</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="o">::</span><span class="na">uses</span><span class="p">(</span><span class="s1">&#39;CakeEventListener&#39;</span><span class="p">,</span> <span class="s1">&#39;Event&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">App</span><span class="o">::</span><span class="na">uses</span><span class="p">(</span><span class="s1">&#39;CakeEvent&#39;</span><span class="p">,</span> <span class="s1">&#39;Event&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SeoComponent</span> <span class="k">extends</span> <span class="nx">Component</span> <span class="k">implements</span> <span class="nx">CakeEventListener</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Setup the component</span>
</span><span class='line'><span class="sd"> * Called after the Controller::beforeFilter() and before the controller action</span>
</span><span class='line'><span class="sd"> * </span>
</span><span class='line'><span class="sd"> * @param Controller $controller</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">startup</span><span class="p">(</span><span class="nx">Controller</span> <span class="nv">$controller</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">parent</span><span class="o">::</span><span class="na">startup</span><span class="p">(</span><span class="nv">$controller</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$controller</span><span class="o">-&gt;</span><span class="na">getEventManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">attach</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * List of callable functions which are attached to system events</span>
</span><span class='line'><span class="sd"> * </span>
</span><span class='line'><span class="sd"> * @return array</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">implementedEvents</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;View.beforeLayout&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;writeSeo&#39;</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Inject the seo data into the view</span>
</span><span class='line'><span class="sd"> * </span>
</span><span class='line'><span class="sd"> * @param CakeEvent $event</span>
</span><span class='line'><span class="sd"> * @return void</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">writeSeo</span><span class="p">(</span><span class="nx">CakeEvent</span> <span class="nv">$event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Looking for vars set to the view isn&#39;t especially robust! This should probably call a behaviour method which goes and looks up data</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">viewVars</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">][</span><span class="s1">&#39;Content&#39;</span><span class="p">][</span><span class="s1">&#39;seo_title&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">viewVars</span><span class="p">[</span><span class="s1">&#39;title_for_layout&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">viewVars</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">][</span><span class="s1">&#39;Content&#39;</span><span class="p">][</span><span class="s1">&#39;seo_title&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">viewVars</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">][</span><span class="s1">&#39;Content&#39;</span><span class="p">][</span><span class="s1">&#39;seo_description&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">Html</span><span class="o">-&gt;</span><span class="na">meta</span><span class="p">(</span><span class="s1">&#39;description&#39;</span><span class="p">,</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">viewVars</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">][</span><span class="s1">&#39;Content&#39;</span><span class="p">][</span><span class="s1">&#39;seo_description&#39;</span><span class="p">],</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;block&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;meta&#39;</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">viewVars</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">][</span><span class="s1">&#39;Content&#39;</span><span class="p">][</span><span class="s1">&#39;seo_keywords&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">Html</span><span class="o">-&gt;</span><span class="na">meta</span><span class="p">(</span><span class="s1">&#39;keywords&#39;</span><span class="p">,</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">viewVars</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">][</span><span class="s1">&#39;Content&#39;</span><span class="p">][</span><span class="s1">&#39;seo_keywords&#39;</span><span class="p">],</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;block&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;meta&#39;</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Success</h3>

<p>Make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Third party libraries with CakePHP]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-08/third-party-libraries-with-cakephp/"/>
    <updated>2013-08-01T15:23:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-08/third-party-libraries-with-cakephp</id>
    <content type="html"><![CDATA[<p>I always struggle to include third party library files in my Cake project as they very often do not adhere to any coding standard such as <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md">PSR0</a>.</p>

<h3>Where to put the files?</h3>

<p>Third party files should always go into your <code>Vendor</code> folder inside your project.</p>

<h3>How to load them?</h3>

<p>Usually you will want to use the <code>App</code> class to load your third party classes into your application using <code>App::import()</code>. The parameters of this in the api do not match the usage, which apparently is for backwards compatibility.</p>

<p><a href="http://book.cakephp.org/2.0/en/core-utility-libraries/app.html#including-files-with-app-import">The App class in the cookbook</a>.</p>

<p>The code will look like the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nx">App</span><span class="o">::</span><span class="na">import</span><span class="p">(</span><span class="s1">&#39;Vendor&#39;</span><span class="p">,</span> <span class="s1">&#39;TheNameOfMyClass&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;file&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;DavesLibrary&#39;</span><span class="o">.</span><span class="nx">DS</span><span class="o">.</span><span class="s1">&#39;DavesClass.php&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// DavesLibrary/DavesClass.php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TheNameOfMyClass</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Importing a Vendor library from a plugin? No problem, use plugin.notation</span>
</span><span class='line'><span class="nx">App</span><span class="o">::</span><span class="na">import</span><span class="p">(</span><span class="s1">&#39;Vendor&#39;</span><span class="p">,</span> <span class="s1">&#39;DavesPlugin.TheNameOfMyClass&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;file&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;DavesLibrary&#39;</span><span class="o">.</span><span class="nx">DS</span><span class="o">.</span><span class="s1">&#39;DavesClass.php&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Success</h3>

<p>Make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CakePHP config for Nginx]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-08/cakephp-config-for-nginx/"/>
    <updated>2013-08-01T15:17:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-08/cakephp-config-for-nginx</id>
    <content type="html"><![CDATA[<p>I always have trouble configuring Nginx with CakePHP as I&rsquo;m forever trying to add extra things to the config.</p>

<p>Here is an example config template.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">server</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">listen</span>   <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">server_name</span> <span class="s">example.dev</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># root directive should be global</span>
</span><span class='line'>    <span class="kn">root</span> <span class="s">/Users/david/Sites/example_website/webroot</span><span class="p">;</span>
</span><span class='line'>    <span class="c1"># If you are using a project with the `/app` folder, you&#39;ll need to uncomment the following</span>
</span><span class='line'>    <span class="c1"># root /Users/david/Sites/example_website/app/webroot;</span>
</span><span class='line'>    <span class="kn">access_log</span>     <span class="s">/usr/local/var/log/nginx/example.access_log</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">error_log</span>      <span class="s">/usr/local/var/log/nginx/example.error_log</span> <span class="s">debug</span><span class="p">;</span>
</span><span class='line'>    <span class="c1"># debug will logs lots, don&#39;t use this in production</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">index</span>  <span class="s">index.php</span> <span class="s">index.html</span> <span class="s">index.htm</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="nv">$uri/</span> <span class="s">/index.php?</span><span class="nv">$uri&amp;$args</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">location</span> <span class="p">~</span> <span class="sr">\.php(/|$)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">fastcgi_pass</span>  <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">9001</span><span class="p">;</span>
</span><span class='line'>        <span class="c1"># I use port 9001 as I have XDebug on port 9000, but php-fpm uses 9000 as default</span>
</span><span class='line'>        <span class="kn">fastcgi_split_path_info</span> <span class="s">^(.+\.php)(/.*)</span>$<span class="p">;</span>
</span><span class='line'>        <span class="kn">include</span> <span class="s">fastcgi_params</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">fastcgi_param</span>  <span class="s">SCRIPT_FILENAME</span>  <span class="nv">$document_root$fastcgi_script_name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Different finds in CakePHP]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-08/different-finds-in-cakephp/"/>
    <updated>2013-08-01T15:11:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-08/different-finds-in-cakephp</id>
    <content type="html"><![CDATA[<p>I had a reference for how to do different types of finds in CakePHP using the manual join method and the Containable or Linkable behaviours.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Using containable</span>
</span><span class='line'>
</span><span class='line'><span class="cm">The problem with this is that if Group doens&#39;t match, then it will just return a blank array</span>
</span><span class='line'><span class="cm">dimension, because containable is just going to join the arrays in php</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">User</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;first&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;contain&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;Group&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;Group.id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$groupId</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;User.id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$userId</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Using Linkable (https://github.com/lorenzo/linkable)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">This will do the same as above, but force a join. So if group doesn&#39;t match, you won&#39;t even get a result</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">User</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;first&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;link&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;Group&#39;</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;User.id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$userId</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Group.id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$groupId</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Using joins</span>
</span><span class='line'>
</span><span class='line'><span class="cm">This does the same as above, but obviously is a bigger find</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">User</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;first&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;joins&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;table&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;groups&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;alias&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Group&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;LEFT&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;Group.id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$groupId</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;User.id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$userId</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Using Paginate with Containable</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="c1">// Load the component</span>
</span><span class='line'><span class="nv">$components</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;Paginator&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Paginate contained data</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Paginator</span><span class="o">-&gt;</span><span class="na">settings</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;contain&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;Group&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;Group.id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$groupId</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;User.id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$userId</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="s1">&#39;limit&#39;</span> <span class="o">=&gt;</span> <span class="mi">10</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Paginator</span><span class="o">-&gt;</span><span class="na">paginate</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">User</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to display the history of a file in Git with diffs]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-06/git-file-history/"/>
    <updated>2013-06-11T00:00:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-06/git-file-history</id>
    <content type="html"><![CDATA[<h3>Use case</h3>

<p>You want to see all the changes which have been made to a single file in the project.</p>

<h3>References</h3>

<p>This was solved by a brighter mind than my own.<br/>
<a href="https://twitter.com/YellDavid/status/344398277275435008">Daniel Hofstetter ‏@dhofstet on Twitter</a></p>

<h3>Solution</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git log -p &lt;filename&gt;
</span></code></pre></td></tr></table></div></figure>


<p>If you are using the most excellent <a href="http://www.sourcetreeapp.com/">SourceTree</a> then you can select a file and go to <code>Actions</code> > <code>Log selected</code> to see a window of all the changes.</p>

<h3>Success</h3>

<p>Go make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack to fix SoftDelete behaviour return in CakePHP]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-04/softdelete-return/"/>
    <updated>2013-04-16T00:00:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-04/softdelete-return</id>
    <content type="html"><![CDATA[<h3>Use case</h3>

<p>You have downloaded and installed the <a href="https://github.com/cakedc/utils">Utils.SoftDelete</a> behaviour, but when you delete an item the return is <code>false</code> because the behaviour has stopped the delete and run an update instead.</p>

<p>You still need to feedback to the user that the item has been deleted succesfully, ie, returning a <code>true</code>.</p>

<h3>References</h3>

<ul>
<li><a href="https://github.com/CakeDC/utils/issues/19">https://github.com/CakeDC/utils/issues/19</a></li>
<li><a href="https://groups.google.com/forum/?fromgroups=#!topic/cakephp-core/2vIZN8Sq8RE">cakephp-core › callbacks and returning true</a></li>
</ul>


<h3>Solution</h3>

<p>This is a solution that I&rsquo;ve written myself based on the solutions of Ceeram and Augusto Franzoia.</p>

<p>It will need to go into the <code>AppModel</code> of your application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">delete</span><span class="p">(</span><span class="nv">$id</span> <span class="o">=</span> <span class="k">null</span><span class="p">,</span> <span class="nv">$cascade</span> <span class="o">=</span> <span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$result</span> <span class="o">=</span> <span class="k">parent</span><span class="o">::</span><span class="na">delete</span><span class="p">(</span><span class="nv">$id</span><span class="p">,</span> <span class="nv">$cascade</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$result</span> <span class="o">===</span> <span class="k">false</span> <span class="o">&amp;&amp;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Behaviors</span><span class="o">-&gt;</span><span class="na">enabled</span><span class="p">(</span><span class="s1">&#39;SoftDelete&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">field</span><span class="p">(</span><span class="s1">&#39;deleted&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;deleted&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Success</h3>

<p>Go make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Only One validation for CakePHP]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-04/onlyone-cake-validation/"/>
    <updated>2013-04-06T00:00:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-04/onlyone-cake-validation</id>
    <content type="html"><![CDATA[<h3>Use case</h3>

<p>You want to set a default for a collection of items and you need to validate that there is only one default set in the collection.</p>

<h3>Setup</h3>

<p>I tend to use a <code>bool NOT NULL DEFAULT 0</code> field for this in the database. Then in my model I&rsquo;ll implement a custom validation function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">public</span> <span class="nv">$validate</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;default&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="c1">// Name of the field</span>
</span><span class='line'>            <span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="c1">// The name of the rule</span>
</span><span class='line'>                <span class="s1">&#39;rule&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;onlyOne&#39;</span><span class="p">,</span> <span class="c1">// My custom validation</span>
</span><span class='line'>                <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Only one can be default. A default already exists&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;required&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Checks to ensure that only one record has the default flag</span>
</span><span class='line'><span class="sd"> * @param array $check An array containing {field}=&gt;{value}</span>
</span><span class='line'><span class="sd"> * @return bool</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">onlyOne</span><span class="p">(</span><span class="nv">$check</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// If turning off default, we don&#39;t mind</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$check</span><span class="p">[</span><span class="s1">&#39;default&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Find the current default</span>
</span><span class='line'>        <span class="nv">$default</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;first&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;default&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="s1">&#39;fields&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// No default exists</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$default</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// If we are updating the current default</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$default</span><span class="p">[</span><span class="s1">&#39;Model&#39;</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;Model&#39;</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h3>Success</h3>

<p>Go make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to debug routes in Symfony2]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-03/router-debugging-in-symfony/"/>
    <updated>2013-03-01T00:00:00+00:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-03/router-debugging-in-symfony</id>
    <content type="html"><![CDATA[<p>When choosing my type of routing in Symfony2, I wanted to avoid using XML as I&rsquo;ve been put off it by working with Magento, so that left YAML and Annotation.</p>

<p>I picked annotation as it looked neater, but I wanted to find out how to find a controller from a url.</p>

<h3>Trace a url back to a controller</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>app/console router:match /players/
</span><span class='line'>Route <span class="s2">&quot;players_index&quot;</span> matches
</span><span class='line'><span class="nv">$ </span>app/console router:debug players_index
</span><span class='line'><span class="o">[</span>router<span class="o">]</span> Route <span class="s2">&quot;players_index&quot;</span>
</span><span class='line'>Name         players_index
</span><span class='line'>Pattern      /players/
</span><span class='line'>Class        Symfony<span class="se">\C</span>omponent<span class="se">\R</span>outing<span class="se">\R</span>oute
</span><span class='line'>Defaults     _controller: PingPong<span class="se">\B</span>undle<span class="se">\P</span>layerBundle<span class="se">\C</span>ontroller<span class="se">\P</span>layersController::indexAction
</span><span class='line'>Requirements
</span><span class='line'>Options      compiler_class: Symfony<span class="se">\C</span>omponent<span class="se">\R</span>outing<span class="se">\R</span>outeCompiler
</span><span class='line'>Regex        <span class="c">#^/players/$#s</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will allow you to chase Controller annotated routes from the command line!</p>

<h3>Success</h3>

<p>Have a brew, you&rsquo;ve earned it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Nginx config for Symfony2]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-02/symfony-nginx/"/>
    <updated>2013-02-27T00:00:00+00:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-02/symfony-nginx</id>
    <content type="html"><![CDATA[<p>Wow, so I&rsquo;ve just spent the last 2.5 hours trying to configure nginx to work with my Symfony2 project and I&rsquo;ve finally cracked it, so this is a celebratory post to ensure that I don&rsquo;t have to look for the config again.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">server</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">listen</span> <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">server_name</span> <span class="s">tabletennistracker.dev</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">root</span> <span class="s">/home/neon/Sites/TableTennisTracker/web</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">error_log</span> <span class="s">/var/log/nginx/tabletennistracker.error.log</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">access_log</span> <span class="s">/var/log/nginx/tabletennistracker.access.log</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">index</span> <span class="s">app.php</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="nv">$uri/</span> <span class="s">/app.php?</span><span class="nv">$query_string</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">location</span> <span class="p">~</span> <span class="sr">^/(app|app_dev)\.php(/|$)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">fastcgi_split_path_info</span> <span class="s">^(.+\.php)(/.+)</span>$<span class="p">;</span>
</span><span class='line'>    <span class="kn">fastcgi_pass</span> <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">9001</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">include</span> <span class="s">fastcgi_params</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">fastcgi_param</span> <span class="s">SCRIPT_FILENAME</span> <span class="nv">$document_root$fastcgi_script_name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <a href="http://wiki.nginx.org/Symfony">nginx symfony page</a> had some strange <code>@rewrite</code> in it which was causing my server to fail on a redirect loop. This turned out to be the config which worked.</p>

<p>Time for another glass of wine!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to cache an element in CakePHP]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-02/element-caching/"/>
    <updated>2013-02-07T00:00:00+00:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-02/element-caching</id>
    <content type="html"><![CDATA[<p>So this is something that I do on a regular basis and can never quite remember the correct order of the options. Oh sure, it&rsquo;s in the <a href="http://book.cakephp.org">book</a> but I always struggle to find the bit I need.</p>

<blockquote><p>The url is here, <a href="http://book.cakephp.org/2.0/en/views.html#caching-elements">http://book.cakephp.org/2.0/en/views.html#caching-elements</a></p></blockquote>

<p>Also worth including some code here to save me having to click a link.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">element</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;helpbox&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="k">array</span><span class="p">(</span><span class="s1">&#39;var&#39;</span> <span class="o">=&gt;</span> <span class="nv">$var</span><span class="p">),</span>
</span><span class='line'>    <span class="k">array</span><span class="p">(</span><span class="s1">&#39;cache&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;key&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;first_use&#39;</span><span class="p">,</span> <span class="s1">&#39;config&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;view_long&#39;</span><span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Params</strong><br/>
Name of element, array of data then options. Ref, <a href="http://api.cakephp.org/class/view#method-Viewelement">http://api.cakephp.org/class/view#method-Viewelement</a><br/>
<strong>NB</strong><br/>
It&rsquo;s also worth remebering that if you are caching something it will be cached in that state from the moment it&rsquo;s called. If you something is dynamic and you are caching it, <em>always</em> use a proper <code>key</code> for it in the options array! Or use <code>$this-&gt;here</code> to use the current url slug as the key.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sharing folders from a Mac to Ubuntu using Samba]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-01/loading-remote-shares/"/>
    <updated>2013-01-18T00:00:00+00:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-01/loading-remote-shares</id>
    <content type="html"><![CDATA[<p>So due to snow I had to work from home. I needed to mount my work files over the VPN so that I could use my work Mac as my server. This would save me loads of time, allowing me to edit the files remotely and view them using my Macs nginx server.</p>

<h2>Using Samba / CIFS</h2>

<h3>Setup</h3>

<p>For this method you&rsquo;ll need to enable file sharing on the Mac locally in <strong>System Preferences</strong> > <strong>Sharing</strong> and enable <strong>File Sharing</strong>. Then you&rsquo;ll want to share a folder, probably your home folder, <code>/Users/david</code>. Hit <strong>Options</strong> and enable sharing with SMB. Be sure to click the account that you want to use, and enter your password.</p>

<h3>Connecting to the share</h3>

<p>In Ubuntu or Windows, you should be able to connect to the folder using the IP address of your computer, in the format of <code>smb://192.168.0.1</code> then enter your local machine login.</p>

<h3>Mounting the share</h3>

<p>Check to make sure that you have <code>cifs</code> installed by looking for <code>cifs-utils</code> package.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>dpkg --get-selections cifs-utils
</span></code></pre></td></tr></table></div></figure>


<p>
If not, you&rsquo;ll need to install it. <code>sudo apt-get install cifs-utils</code>.</p>

<p>In terminal</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo mount -t cifs //server/share -o <span class="s1">&#39;username=david,password=mypassword,rw,nounix,noserverinfo,sec=ntlmssp,file_mode=0777,dir_mode=0777&#39;</span> /mnt/david_mac
</span></code></pre></td></tr></table></div></figure>


<h2>Using NFS</h2>

<h3>Setup</h3>

<p>Firstly you need to edit the <code>/etc/exports</code> on the Mac to add the folder that you want to share. Something like <code>"/Users/david" -alldirs -mapall=501</code> will share the home folder to everyone on your network, fine for internal mounting.</p>

<p>Next we need to make sure that the file is correct and nfsd is running.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>showmount -e
</span><span class='line'><span class="nv">$ </span>sudo nfsd checkexports
</span><span class='line'><span class="nv">$ </span>sudo nfsd status
</span><span class='line'><span class="nv">$ </span>sudo nfsd restart
</span><span class='line'><span class="nv">$ </span>showmount -e
</span></code></pre></td></tr></table></div></figure>


<h3>Mount the share</h3>

<p><code>sudo mount -t nfs -o 'proto=tcp,port=2049,nolock' hostname:/Users/david /mnt/david_mac/</code></p>

<h2>Done</h2>

<p>Have a celebratory cup of tea. You deserve it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Twitter Bootstrap alert-box element for CakePHP]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-01/alert-box-element-for-cake/"/>
    <updated>2013-01-17T00:00:00+00:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-01/alert-box-element-for-cake</id>
    <content type="html"><![CDATA[<p>So I like the <a href="http://twitter.github.com/bootstrap/components.html#alerts">Twitter Bootstrap alerts</a> and I wanted a way to use them in my <a href="http://cakephp.org/">CakePHP</a> projects when controller actions return flash messages.</p>

<h3>Element</h3>

<p><strong>app/View/Elements/alert-box.ctp</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='html+php'><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">class</span><span class="o">=</span><span class="s2">&quot;alert &lt;?php echo </span><span class="si">$class</span><span class="s2">;?&gt;&quot;</span><span class="o">&gt;</span>
</span><span class='line'>    <span class="o">&lt;?</span><span class="nx">php</span> <span class="k">echo</span> <span class="nv">$message</span><span class="p">;</span> <span class="cp">?&gt;</span>
</span><span class='line'>    <span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;#&quot;</span> <span class="na">class=</span><span class="s">&quot;close&quot;</span> <span class="na">onclick=</span><span class="s">&quot;$(this).parent().fadeOut();return false;&quot;</span><span class="nt">&gt;</span><span class="ni">&amp;times;</span><span class="nt">&lt;/a&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Usage</h3>

<p>The element is used from the controller by appending the <code>element</code> and <code>class</code> to the <code>$this-&gt;element()</code> call.<br/>
<strong>Success</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Session</span><span class="o">-&gt;</span><span class="na">setFlash</span><span class="p">(</span><span class="nx">__</span><span class="p">(</span><span class="s1">&#39;The article has been saved&#39;</span><span class="p">),</span> <span class="s1">&#39;alert-box&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;alert-success&#39;</span><span class="p">));</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>Failed</strong></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Session</span><span class="o">-&gt;</span><span class="na">setFlash</span><span class="p">(</span><span class="nx">__</span><span class="p">(</span><span class="s1">&#39;The article could not be saved. Please, try again.&#39;</span><span class="p">),</span> <span class="s1">&#39;alert-box&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;class&#39;</span><span class="o">=&gt;</span><span class="s1">&#39;alert-error&#39;</span><span class="p">));</span> <span class="cp">?&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Allow alt-tab across all viewports in Ubuntu]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-01/unity-alt-tab/"/>
    <updated>2013-01-16T00:00:00+00:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-01/unity-alt-tab</id>
    <content type="html"><![CDATA[<p>I dev at work on a Mac and at home in an Ubuntu VM. On my Ubuntu machine I tend to spread my apps across multiple viewports for ease of organisation. However the new Ubuntu Unity plugin for Compiz means that alt-tab only works for your current viewport. Not ideal.</p>

<h3>First thing&rsquo;s first</h3>

<p>You&rsquo;ll need to install the CompizConfig Settings Manager. You can find this in the software centre by searching for &lsquo;<strong>Compiz</strong>&rsquo;, or you can install it from Terminal using <code>sudo apt-get install compizconfig-settings-manager</code>.</p>

<h3>Configure Unity</h3>

<p>Once this is installed it should appear in your applications bar on the left. If not, hit the Ubuntu button and type &lsquo;Compiz&rsquo;.</p>

<p>Scroll down to the third section, and click on the &lsquo;<strong>Ubuntu Unity Plugin</strong>&rsquo;. Click on the &lsquo;<strong>Switcher</strong>&rsquo; tab at the top, and then untick the &lsquo;<strong>Bias alt-tab to prefer windows on the current viewport</strong>&rsquo;.</p>

<h3>Make a brew!</h3>

<p>That&rsquo;s it. Job done. Happy alt-tabbing.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to implement CodeSniffer into Netbeans]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-01/netbeans-codesniffer/"/>
    <updated>2013-01-15T00:00:00+00:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-01/netbeans-codesniffer</id>
    <content type="html"><![CDATA[<h3>Things you will need</h3>

<p><strong>Netbeans plugin</strong>
Download the plugin from here, <a href="http://plugins.netbeans.org/plugin/40282/phpmd-php-codesniffer-plugin">http://plugins.netbeans.org/plugin/40282/phpmd-php-codesniffer-plugin</a><br/>
<strong>OR</strong><br/>
<a href="http://plugins.netbeans.org/plugin/42434/phpcsmd">http://plugins.netbeans.org/plugin/42434/phpcsmd</a><br/>
This plugin will highlight the lines in your IDE rather than just ouputting items to your action window.</p>

<p>Download whichever one you think will be less invasive in your dev. As switching between frameworks and standards can cause whole pages to go pink with <code>phpcsmd</code> plugin.</p>

<p><strong>PEAR installed</strong>
You can test this by typing into a terminal <code>which pear</code> and it should return a path. If you do not have PEAR installed, you can find out how to install it from the site, <a href="http://pear.php.net/">http://pear.php.net/</a></p>

<p><strong>PEAR packages</strong>
<em>Note</em>
If you get errors whilst installing PEAR packages, try using <code>sudo</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pear install PHP_CodeSniffer
</span></code></pre></td></tr></table></div></figure>


<p>
<a href="http://pear.php.net/package/PHP_CodeSniffer">http://pear.php.net/package/PHP_CodeSniffer</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pear channel-discover pear.phpmd.org
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pear channel-discover pear.pdepend.org
</span></code></pre></td></tr></table></div></figure>


<p></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pear install --alldeps phpmd/PHP_PMD
</span></code></pre></td></tr></table></div></figure>


<p>
<a href="http://phpmd.org/">http://phpmd.org/</a></p>

<h3>Install the plugin</h3>

<p>In Netbeans click <strong>Tools</strong> > <strong>Plugins</strong> and click the <strong>Downloaded</strong> tab. Click on <strong>Add Plugins…</strong> and browse to where your <code>.nbm</code> file is located. Install this file and restart Netbeans.</p>

<h3>Configuring the plugin</h3>

<p>Now you need to configure the plugin so it can find your PEAR packages.
You will need to configure this in <strong>Preferences</strong>.</p>

<p>Click on the <strong>PHP</strong> tab, and browse to the <strong>phpMD</strong> tab. Click <strong>change</strong> and in here specify the path to your <code>phpmd</code>. For me this is <code>/usr/local/Cellar/php53/5.3.17/bin/phpcs</code> but you can test this in a terminal with <code>which phpmd</code> to ge the path.</p>

<p>Now click on <strong>phpCodeSniffer</strong> tab and do the same as above to enter the path to your <code>phpcs</code> executable.</p>

<h4>Other settings</h4>

<p>In here I tend to specify that the <code>tabsize</code> is 4 to conform with PSR-2.</p>

<h3>How do I &lsquo;run&rsquo; it?</h3>

<p><strong>Window</strong> > <strong>Action items</strong></p>

<p>or <code>CMD</code> + <code>6</code></p>

<p>Then you can use the filters on the left to adjust which things it scans. I tend to use the &lsquo;paper sheet&rsquo; icon at the top which is &lsquo;current file&rsquo;. You can then use the funnel icon to specify which things you want displayed.</p>
]]></content>
  </entry>
  
</feed>
