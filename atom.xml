<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Daves dev warblings]]></title>
  <link href="http://jedistirfry.co.uk/atom.xml" rel="self"/>
  <link href="http://jedistirfry.co.uk/"/>
  <updated>2015-05-20T16:23:31+01:00</updated>
  <id>http://jedistirfry.co.uk/</id>
  <author>
    <name><![CDATA[David Yell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[jQuery UI Accordion]]></title>
    <link href="http://jedistirfry.co.uk/blog/2015-05/jquery-ui-accordion/"/>
    <updated>2015-05-20T16:14:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2015-05/jquery-ui-accordion</id>
    <content type="html"><![CDATA[<h2>Time for some Javascript!</h2>

<p>So I&rsquo;ve implemented the <a href="https://jqueryui.com/accordion/">jQueryUI Accordion</a> as a menu system for a CMS that I&rsquo;m building and I&rsquo;ve noticed that the active header will not open automatically.</p>

<p>This means that when a user hits a link to visit a new page, the accordion will not display their current menu item as active.</p>

<p>Time for some code!</p>

<h2>Markup</h2>

<p>I&rsquo;ve used the same markup as the example, except that because it&rsquo;s a menu, I needed some bullet points.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;div</span> <span class="na">id=</span><span class="s">&#39;accordion&#39;</span><span class="nt">&gt;</span>
</span><span class='line'>  <span class="nt">&lt;h3&gt;</span>First Heading<span class="nt">&lt;/h3&gt;</span>
</span><span class='line'>  <span class="nt">&lt;div&gt;</span>
</span><span class='line'>      <span class="nt">&lt;ul&gt;</span>
</span><span class='line'>          <span class="c">&lt;!-- Add an active class how you want to --&gt;</span>
</span><span class='line'>          <span class="nt">&lt;li</span> <span class="na">class=</span><span class="s">&#39;active&#39;</span><span class="nt">&gt;</span>First item<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>          <span class="nt">&lt;li&gt;</span>Second item<span class="nt">&lt;/li&gt;</span>
</span><span class='line'>      <span class="nt">&lt;/ul&gt;</span>
</span><span class='line'>  <span class="nt">&lt;/div&gt;</span>
</span><span class='line'>  <span class="c">&lt;!-- More items repeated --&gt;</span>
</span><span class='line'><span class="nt">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>jQuery</h2>

<p>So how can we use the markup to tell the javascript which heading to mark active? Turns out it&rsquo;s remarkably simple.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">$</span><span class="p">(</span><span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//  Accordian navigation</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#accordion&#39;</span><span class="p">).</span><span class="nx">accordion</span><span class="p">({</span>
</span><span class='line'>        <span class="nx">heightStyle</span><span class="o">:</span> <span class="s2">&quot;content&quot;</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;#accordion h3&#39;</span><span class="p">).</span><span class="nx">each</span><span class="p">(</span><span class="kd">function</span> <span class="p">(</span><span class="nx">i</span><span class="p">,</span><span class="nx">e</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">$</span><span class="p">(</span><span class="nx">e</span><span class="p">).</span><span class="nx">next</span><span class="p">(</span><span class="s1">&#39;div&#39;</span><span class="p">).</span><span class="nx">find</span><span class="p">(</span><span class="s1">&#39;li.active&#39;</span><span class="p">).</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="nx">$</span><span class="p">(</span><span class="s2">&quot;#accordion&quot;</span><span class="p">).</span><span class="nx">accordion</span><span class="p">(</span><span class="s2">&quot;option&quot;</span><span class="p">,</span> <span class="s2">&quot;active&quot;</span><span class="p">,</span> <span class="nx">i</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>The trick here is the use of <code>next()</code> to select the immediately adjacent <code>div</code> without selecting all the other siblings.</p>

<h2>Go make a brew!</h2>

<p>All done, that&rsquo;s it!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paginating multiple types of list in the same controller]]></title>
    <link href="http://jedistirfry.co.uk/blog/2015-04/paginating-multiple-types-of-list-in-the-same-controller/"/>
    <updated>2015-04-29T11:57:10+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2015-04/paginating-multiple-types-of-list-in-the-same-controller</id>
    <content type="html"><![CDATA[<h2>What a complicated title</h2>

<p>Okay, agreed. Perhaps an example would be better. Imagine you have a <code>ContentsController</code> which you use in your application to render lots of different types of content. You might have <code>ContentTypes</code> such as News, Guides, Articles, Pages, etc. so there is no point creating lots of controllers, when your <code>ContentsController::index()</code> method could just output the same thing with just different data.</p>

<p>This post is about how you deal with those lists in your routing and how to paginate them so that you can preserve your urls.</p>

<h2>Routing</h2>

<p>So the first thing to do is to setup your routing so that you can keep your content separate.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Router</span><span class="o">::</span><span class="na">scope</span><span class="p">(</span><span class="s1">&#39;/&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nv">$routes</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">connect</span><span class="p">(</span><span class="s1">&#39;/guides/:slug&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;controller&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Contents&#39;</span><span class="p">,</span> <span class="s1">&#39;action&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;view&#39;</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Guides&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s1">&#39;slug&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;[a-z-]+&#39;</span><span class="p">,</span> <span class="s1">&#39;pass&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;slug&#39;</span><span class="p">]]);</span>
</span><span class='line'>    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">connect</span><span class="p">(</span><span class="s1">&#39;/guides&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;controller&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Contents&#39;</span><span class="p">,</span> <span class="s1">&#39;action&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Guides&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s1">&#39;pass&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">]]);</span>
</span><span class='line'>
</span><span class='line'>    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">connect</span><span class="p">(</span><span class="s1">&#39;/news/:slug&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;controller&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Contents&#39;</span><span class="p">,</span> <span class="s1">&#39;action&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;view&#39;</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;News&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s1">&#39;slug&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;[a-z-]+&#39;</span><span class="p">,</span> <span class="s1">&#39;pass&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">,</span> <span class="s1">&#39;slug&#39;</span><span class="p">]]);</span>
</span><span class='line'>    <span class="nv">$routes</span><span class="o">-&gt;</span><span class="na">connect</span><span class="p">(</span><span class="s1">&#39;/news&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;controller&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Contents&#39;</span><span class="p">,</span> <span class="s1">&#39;action&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;News&#39;</span><span class="p">],</span> <span class="p">[</span><span class="s1">&#39;pass&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;type&#39;</span><span class="p">]]);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>This now means that we can access all our different types of content on different urls so that it makes sense to the user.</p>

<h2>Creating our links</h2>

<p>So now we need to point users to our content.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// Link to the index</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Html</span><span class="o">-&gt;</span><span class="na">link</span><span class="p">(</span><span class="s1">&#39;Guides&#39;</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;controller&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Contents&#39;</span><span class="p">,</span> <span class="s1">&#39;action&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Guides&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Link to a single item</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Html</span><span class="o">-&gt;</span><span class="na">link</span><span class="p">(</span><span class="nv">$guide</span><span class="o">-&gt;</span><span class="na">title</span><span class="p">,</span> <span class="p">[</span><span class="s1">&#39;controller&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Contents&#39;</span><span class="p">,</span> <span class="s1">&#39;action&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;view&#39;</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Guides&#39;</span><span class="p">,</span> <span class="s1">&#39;slug&#39;</span> <span class="o">=&gt;</span> <span class="nv">$guide</span><span class="o">-&gt;</span><span class="na">slug</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<h2> Paginating the index</h2>

<p>As we are using a single view to paginate many different lists we need to tell the Pagination helper how to form the url properly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Paginator</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">([</span>
</span><span class='line'>    <span class="s1">&#39;url&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;controller&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Contents&#39;</span><span class="p">,</span> <span class="s1">&#39;action&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="nv">$type</span><span class="o">-&gt;</span><span class="na">name</span><span class="p">]</span>
</span><span class='line'><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will now pass the <code>type</code> correctly in all our pagination links, which means that it&rsquo;ll match the routing correctly and you should end up with nicely paginated urls which match your routing such as <code>/guides?page=2</code>.</p>

<h2>Getting the list</h2>

<p>So you&rsquo;ll need to process the <code>type</code> when it&rsquo;s passed to your controller, so be sure to include it in your controllers method signature.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">class</span> <span class="nc">ContentsController</span> <span class="k">extends</span> <span class="nx">AppController</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">(</span><span class="nv">$type</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Lookup the data by type</span>
</span><span class='line'>      <span class="c1">// Perhaps with a custom finder</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Make a brew</h2>

<p>It really is that simple!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Working with the Crud plugin in CakePHP]]></title>
    <link href="http://jedistirfry.co.uk/blog/2015-02/working-with-crud/"/>
    <updated>2015-02-13T12:31:00+00:00</updated>
    <id>http://jedistirfry.co.uk/blog/2015-02/working-with-crud</id>
    <content type="html"><![CDATA[<h2>So what is it?</h2>

<p>It&rsquo;s a plugin for CakePHP 2 and CakePHP 3 which saves you time and energy by automating basic tasks which you would usually write or bake youself. These are the CRUD operations (Create, Read, Update and Delete), hence the name of the plugin.</p>

<p>The idea is that instead of writing repeated controller actions the same functionality can be provided for any model automatically using the events system.</p>

<p><a href="https://github.com/FriendsOfCake/crud">Read more about the plugin in the repo</a>.</p>

<h2>I&rsquo;m sold, how do I use it?</h2>

<p>Once the plugin is installed all you have to do is map a controller action to a crud action, create a controller and a view and you&rsquo;re job done. It&rsquo;s really that simple.</p>

<p>Let&rsquo;s do an example. I will add comments to the code for various techniques.</p>

<p><strong>Assumptions</strong><br/>
Here we&rsquo;ll assume the plugin is loaded already, the trait is being used and we have a model called <code>Examples</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// I tend to configure Crud in my AppController to save on repitition</span>
</span><span class='line'><span class="k">class</span> <span class="nc">AppController</span> <span class="k">extends</span> <span class="nx">Controller</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">use</span> <span class="nx">CrudControllerTrait</span><span class="p">;</span>
</span><span class='line'>  
</span><span class='line'>  <span class="k">public</span> <span class="nv">$components</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>      <span class="c1">// Here we can configure our action maps, finders and all kinds of things</span>
</span><span class='line'>      <span class="s1">&#39;Crud.Crud&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>          <span class="s1">&#39;actions&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>              <span class="s1">&#39;index&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Crud.index&#39;</span><span class="p">,</span> <span class="c1">// Map any index action to the Crud index action handler</span>
</span><span class='line'>              <span class="s1">&#39;view&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                  <span class="c1">// Configure the options for this action method</span>
</span><span class='line'>                  <span class="s1">&#39;className&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Crud.view&#39;</span><span class="p">,</span>
</span><span class='line'>                  <span class="s1">&#39;validateId&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span>
</span><span class='line'>              <span class="p">],</span>
</span><span class='line'>              <span class="s1">&#39;admin_index&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Crud.index&#39;</span><span class="p">,</span> <span class="c1">// We can even hookup prefix methods</span>
</span><span class='line'>              <span class="s1">&#39;admin_add&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Crud.add&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;admin_edit&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Crud.edit&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;admin_delete&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Crud.delete&#39;</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>  <span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create your ExamplesController.php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">ExamplesController</span> <span class="k">extends</span> <span class="nx">AppController</span> <span class="p">{</span>
</span><span class='line'>  <span class="c1">// We don&#39;t need any code here because Crud plugin can handle the methods for us!</span>
</span><span class='line'>  
</span><span class='line'>  <span class="c1">// If we want to just change how this action finds it&#39;s data we can specify a custom </span>
</span><span class='line'>  <span class="c1">// finder method and still have Crud do the rest of the work for us</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">view</span><span class="p">(</span><span class="nv">$slug</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Crud</span><span class="o">-&gt;</span><span class="na">action</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">findMethod</span><span class="p">(</span><span class="s1">&#39;slug&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Crud</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// What if we want to change the pagination in the index action?</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">index</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// We can hook the beforePaginate event to make changes</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Crud</span><span class="o">-&gt;</span><span class="na">on</span><span class="p">(</span><span class="s1">&#39;beforePaginate&#39;</span><span class="p">,</span> <span class="k">function</span> <span class="p">(</span><span class="nx">CakeEvent</span> <span class="nv">$event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="c1">// The event subject here is the controller, and paginator is the </span>
</span><span class='line'>          <span class="c1">// paginator component.</span>
</span><span class='line'>          <span class="c1">// So we can change the page limit to 10 to include 10 items per page</span>
</span><span class='line'>          <span class="c1">// and we could contain a related model too!</span>
</span><span class='line'>          <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">paginator</span><span class="o">-&gt;</span><span class="na">settings</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>              <span class="s1">&#39;contain&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                  <span class="s1">&#39;User&#39;</span>
</span><span class='line'>              <span class="p">],</span>
</span><span class='line'>              <span class="s1">&#39;limit&#39;</span> <span class="o">=&gt;</span> <span class="mi">10</span>
</span><span class='line'>          <span class="p">];</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>      
</span><span class='line'>      <span class="c1">// Let crud handle the rest of the action</span>
</span><span class='line'>      <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Crud</span><span class="o">-&gt;</span><span class="na">execute</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Create our view Examples/index.ctp</span>
</span><span class='line'><span class="o">&lt;</span><span class="nx">div</span> <span class="nx">class</span><span class="o">=</span><span class="s1">&#39;examples index&#39;</span><span class="o">&gt;</span>
</span><span class='line'>  <span class="o">&lt;?</span><span class="nx">php</span> <span class="k">foreach</span><span class="p">(</span><span class="nv">$examples</span> <span class="k">as</span> <span class="nv">$example</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">echo</span> <span class="nv">$example</span><span class="p">[</span><span class="s1">&#39;Example&#39;</span><span class="p">][</span><span class="s1">&#39;title&#39;</span><span class="p">];</span>
</span><span class='line'>  <span class="p">}</span><span class="cp">?&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">&lt;/div&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<h2> Woah, we just did loads!</h2>

<p>Yep, with the above example, we&rsquo;ve created all our admin prefixed Example methods, both our index and view methods. It&rsquo;s amazing how much quicker you can do stuff when you focus on the parts of your system which are not in the basic four CRUD actions.</p>

<h2>Make a brew</h2>

<p>Why not eh? You&rsquo;ve got loads of spare time now.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing and using pt-visual-explain]]></title>
    <link href="http://jedistirfry.co.uk/blog/2014-08/pt-visual-explain/"/>
    <updated>2014-08-28T17:14:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2014-08/pt-visual-explain</id>
    <content type="html"><![CDATA[<h3>Why?</h3>

<p>So I attended CakeFest this year and it was brilliant. One of the talks which I took at homework was the <a href="https://joind.in/talk/view/11599">Profiling and Optimisation: A practical approach</a> by <a href="http://mark-story.com/">Mark Story</a>.</p>

<p>One the tools mentioned was <code>pt-visual-explain</code>, and I&rsquo;ve been playing with it to see how it can help me better understand my queries and what is happening when I&rsquo;m getting data.</p>

<p>I thought that I would document the process so I don&rsquo;t forget it.</p>

<h3>Install</h3>

<p>Go grab your specific platform download of <a href="http://www.percona.com/downloads/percona-toolkit/LATEST">Percona Toolkit</a>. Personally I used the <strong>tarball</strong> option for my work machine as it&rsquo;s OS X.</p>

<h4>Mac OSX</h4>

<p>Here are the instructions for installation on a Mac. I&rsquo;ve not tried it on my Ubuntu laptop, but when I do, I&rsquo;ll update this post.</p>

<p>Then I unzipped the tarball into a folder. You&rsquo;ll notice that there is a <code>Makefile.PL</code>, this is a Perl script for building the various executables you&rsquo;ll need.</p>

<p>Make sure you have Perl installed, <code>perl --version</code>, which you should be default I think. Then it&rsquo;s time to build the various executables.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>percona-toolkit-2.2.10
</span><span class='line'><span class="nv">$ </span>perl Makefile.PL
</span><span class='line'><span class="nv">$ </span>sudo make
</span><span class='line'><span class="nv">$ </span>sudo make <span class="nb">test</span>
</span><span class='line'><span class="nv">$ </span>sudo make install
</span></code></pre></td></tr></table></div></figure>


<p>Then you&rsquo;ll probably find some warnings or errors about a missing Perl package called <code>DBD::MySQL</code>. So let&rsquo;s install this. I used <a href="http://bixsolutions.net/forum/thread-8.html">this guide</a>, but I will summarise it here.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>perl -MCPAN -e <span class="s1">&#39;shell&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<blockquote><p>If this is the first time you&rsquo;ve used the Cpan module on your Mac you will be asked about configuring your Cpan set-up.</p></blockquote>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cpan&gt; get DBI
</span><span class='line'>cpan&gt; get DBD::mysql
</span><span class='line'>cpan&gt; <span class="nb">exit</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$ </span>sudo perl -MCPAN -e <span class="s1">&#39;install DBI&#39;</span>
</span><span class='line'><span class="nv">$ </span><span class="nb">cd</span> ~/.cpan/build/DBD-mysql-x.xxx/
</span><span class='line'><span class="nv">$ </span>perl Makefile.PL --testuser<span class="o">=</span><span class="s1">&#39;daz&#39;</span> --testpassword<span class="o">=</span><span class="s1">&#39;YOUR_PASSWORD&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&rsquo;t include the <code>--testpassword=''</code> argument if your database doesn&rsquo;t have a password.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>make
</span><span class='line'><span class="nv">$ </span>make <span class="nb">test</span>
</span><span class='line'><span class="nv">$ </span>sudo make install
</span></code></pre></td></tr></table></div></figure>


<p>So now it&rsquo;s time to run it and see what our queries look like.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>pt-visual-explain --connect --host<span class="o">=</span>localhost --user<span class="o">=</span>root --database<span class="o">=</span>myDatabase ~/Percona/MyExampleQuery.sql
</span></code></pre></td></tr></table></div></figure>


<p>You should get a nice visual output of what is going on with your query. At this point you can add indexes, change the query and keep running the visual explainer against it to see how things are changing.</p>

<h3>Done</h3>

<p>That&rsquo;s it! Pretty simple really, apart from all that crap with Perl ;)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sorting multi-dimension model data]]></title>
    <link href="http://jedistirfry.co.uk/blog/2014-08/sorting-data/"/>
    <updated>2014-08-12T15:42:10+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2014-08/sorting-data</id>
    <content type="html"><![CDATA[<h3>Scenario</h3>

<p>So often you have a large collection of collated data, probably with some calculated fields and you want to sort one of the dimensions by a certain value. Pretty hard using regular array methods, unless you start slicing arrays out of their dimension, sort them and inject them back in. We don&rsquo;t want to do that because it&rsquo;s fiddly.</p>

<h3>Solution</h3>

<p>So the solution I like to use is to use <a href="http://php.net/manual/en/function.usort.php">usort()</a>. Which is a handy function allowing you to sort an array using your own function. Perfect if you want to sort a related models data.</p>

<h3>Example</h3>

<p>So for the example we&rsquo;ll assume that we have a <code>League</code> model which <code>hasMany</code> <code>LeaguesUser</code>. We want to count the number of points a user has and order the data accordingly.</p>

<p>When returned from a Cake <code>find()</code> we&rsquo;ll end up with related data in dimensions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">array</span> <span class="p">(</span><span class="nx">size</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>  <span class="s1">&#39;League&#39;</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="k">array</span> <span class="p">(</span><span class="nx">size</span><span class="o">=</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'>      <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;1&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;Examples!&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'>      <span class="s1">&#39;slug&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;examples&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">9</span><span class="p">)</span>
</span><span class='line'>      <span class="s1">&#39;description&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;The league for people who like examples&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">45</span><span class="p">)</span>
</span><span class='line'>      <span class="s1">&#39;cover&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;1000x1000.jpg&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">13</span><span class="p">)</span>
</span><span class='line'>      <span class="s1">&#39;image_dir&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;1&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>      <span class="s1">&#39;join_code&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;da39a3ee5e6b4b0d3255bfef95601890afd80709&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">40</span><span class="p">)</span>
</span><span class='line'>      <span class="s1">&#39;created&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;2014-08-04 10:45:45&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">19</span><span class="p">)</span>
</span><span class='line'>      <span class="s1">&#39;modified&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;2014-08-11 14:54:34&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">19</span><span class="p">)</span>
</span><span class='line'>  <span class="s1">&#39;LeaguesUser&#39;</span> <span class="o">=&gt;</span>
</span><span class='line'>    <span class="k">array</span> <span class="p">(</span><span class="nx">size</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>      <span class="mi">0</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="k">array</span> <span class="p">(</span><span class="nx">size</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>          <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;1&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>          <span class="s1">&#39;league_id&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;1&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>          <span class="s1">&#39;user_id&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;2&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>          <span class="s1">&#39;admin&#39;</span> <span class="o">=&gt;</span> <span class="nx">boolean</span> <span class="k">true</span>
</span><span class='line'>          <span class="s1">&#39;User&#39;</span> <span class="o">=&gt;</span>
</span><span class='line'>            <span class="k">array</span> <span class="p">(</span><span class="nx">size</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>              <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;2&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>              <span class="s1">&#39;email&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;test@example.com&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>
</span><span class='line'>              <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;testuser&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>              <span class="s1">&#39;predictions&#39;</span> <span class="o">=&gt;</span> <span class="nx">int</span> <span class="mi">2</span>
</span><span class='line'>              <span class="s1">&#39;correct&#39;</span> <span class="o">=&gt;</span> <span class="nx">int</span> <span class="mi">0</span>
</span><span class='line'>      <span class="mi">1</span> <span class="o">=&gt;</span>
</span><span class='line'>        <span class="k">array</span> <span class="p">(</span><span class="nx">size</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>          <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;2&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>          <span class="s1">&#39;league_id&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;1&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>          <span class="s1">&#39;user_id&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;1&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>          <span class="s1">&#39;admin&#39;</span> <span class="o">=&gt;</span> <span class="nx">boolean</span> <span class="k">false</span>
</span><span class='line'>          <span class="s1">&#39;User&#39;</span> <span class="o">=&gt;</span>
</span><span class='line'>            <span class="k">array</span> <span class="p">(</span><span class="nx">size</span><span class="o">=</span><span class="mi">5</span><span class="p">)</span>
</span><span class='line'>              <span class="s1">&#39;id&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;1&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>              <span class="s1">&#39;email&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;testuser1@example.com&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">20</span><span class="p">)</span>
</span><span class='line'>              <span class="s1">&#39;username&#39;</span> <span class="o">=&gt;</span> <span class="nx">string</span> <span class="s1">&#39;testuser1&#39;</span> <span class="p">(</span><span class="nx">length</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
</span><span class='line'>              <span class="s1">&#39;predictions&#39;</span> <span class="o">=&gt;</span> <span class="nx">int</span> <span class="mi">2</span>
</span><span class='line'>              <span class="s1">&#39;correct&#39;</span> <span class="o">=&gt;</span> <span class="nx">int</span> <span class="mi">1</span>
</span></code></pre></td></tr></table></div></figure>


<p>So let&rsquo;s sort that <code>LeaguesUser['User']</code> dimension by the number of correct predicitons.</p>

<p>Firstly, we&rsquo;ll want to create a new <code>private function sortByCorrect($a, $b)</code> in our controller. Then we just need to sort using it in our currenct controller method.</p>

<p>The important thing to note is that the callable function passed to <code>usort()</code> is an array containing the current controller as the first item. <code>usort($data, [$this, 'callableFunction'])</code> without including <code>$this</code> you&rsquo;ll get an error.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">view</span><span class="p">(</span><span class="nv">$slug</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$league</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">League</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;first&#39;</span><span class="p">,</span> <span class="p">[</span>
</span><span class='line'>      <span class="s1">&#39;contain&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>          <span class="s1">&#39;LeaguesUser&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>              <span class="s1">&#39;User&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>                  <span class="s1">&#39;fields&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;email&#39;</span><span class="p">,</span> <span class="s1">&#39;username&#39;</span><span class="p">,</span> <span class="s1">&#39;correct&#39;</span><span class="p">,</span> <span class="s1">&#39;predicitons&#39;</span><span class="p">]</span>
</span><span class='line'>              <span class="p">]</span>
</span><span class='line'>          <span class="p">]</span>
</span><span class='line'>      <span class="p">],</span>
</span><span class='line'>      <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span>
</span><span class='line'>          <span class="s1">&#39;League.slug&#39;</span> <span class="o">=&gt;</span> <span class="nv">$slug</span>
</span><span class='line'>      <span class="p">]</span>
</span><span class='line'>  <span class="p">]);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nb">usort</span><span class="p">(</span><span class="nv">$league</span><span class="p">,</span> <span class="p">[</span><span class="nv">$this</span><span class="p">,</span> <span class="s1">&#39;sortByCorrect&#39;</span><span class="p">]);</span>
</span><span class='line'>  
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">set</span><span class="p">(</span><span class="s1">&#39;league&#39;</span><span class="p">,</span> <span class="nv">$league</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span> <span class="k">function</span> <span class="nf">sortByCorrect</span><span class="p">(</span><span class="nv">$a</span><span class="p">,</span> <span class="nv">$b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$a</span><span class="p">[</span><span class="s1">&#39;User&#39;</span><span class="p">][</span><span class="s1">&#39;correct&#39;</span><span class="p">]</span> <span class="o">&lt;</span> <span class="nv">$b</span><span class="p">[</span><span class="s1">&#39;User&#39;</span><span class="p">][</span><span class="s1">&#39;correct&#39;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">elseif</span> <span class="p">(</span><span class="nv">$a</span><span class="p">[</span><span class="s1">&#39;User&#39;</span><span class="p">][</span><span class="s1">&#39;correct&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="nv">$b</span><span class="p">[</span><span class="s1">&#39;User&#39;</span><span class="p">][</span><span class="s1">&#39;correct&#39;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="o">-</span><span class="mi">1</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Rest of controller</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Done</h3>

<p>Go make a brew! Your work here is done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Requiring CakePHP 2.x using Composer]]></title>
    <link href="http://jedistirfry.co.uk/blog/2014-07/converting-your-2-dot-x-application-to-require-cakephp/"/>
    <updated>2014-07-31T15:00:34+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2014-07/converting-your-2-dot-x-application-to-require-cakephp</id>
    <content type="html"><![CDATA[<h3>Scenario</h3>

<p>You have started your project using one of the 2.x downloads. Now you are using Composer to pull in your plugins, but you are still having to commit the framework to your repo.</p>

<p>So it&rsquo;s time to remove your CakePHP lib and start requiring it as a dependancy instead.</p>

<p>I will assume you are fimiliar with <a href="http://getcomposer.org/">Composer</a>.</p>

<h3>Solution</h3>

<p>So it&rsquo;s actually pretty straight forward. For the sake of this example, we will assume that you have a standard layout in your current project.</p>

<p>If you are not familiar with the current layout, <a href="https://github.com/cakephp/cakephp/tree/2.5.3">take a quick look at the 2.5.3 tag</a> to check the folders.</p>

<p>To see what we are aiming at, <a href="https://github.com/FriendsOfCake/app-template">check out the Friends of Cake app-template</a>.</p>

<p>If you don&rsquo;t already have a <code>composer.json</code> file, then you&rsquo;ll want to create that. <code>composer init</code> inside your project folder.</p>

<h4>Adding the framework</h4>

<p>Firstly we want to let Composer know that you want to require the framework, so let&rsquo;s update the <code>composer.json</code> to add the following to your <code>require</code> section.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;cakephp/cakephp&quot;</span><span class="err">:</span> <span class="s2">&quot;2.5.3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can pick your version here if you want to lock in the version, which I&rsquo;d recommend. Or you could specify another version, such as <code>2.5.*</code>. <a href="https://getcomposer.org/doc/01-basic-usage.md#package-versions">Check the Composer docs for more on versions</a>.</p>

<p>When you <code>composer update</code> now it should download the framework for you into <code>vendors/cakephp/cakephp</code>.</p>

<h4>Pointing to the correct core</h4>

<p>The next task is to tell CakePHP that we have a new place for it to find the core. There are only really a few files you need to update.</p>

<ul>
<li><code>app/webroot/index.php</code></li>
<li><code>app/Console/cake.php</code></li>
</ul>


<p><strong>app/webroot/index.php</strong><br/>
You&rsquo;ll want to update the <code>ROOT</code>, <code>APP_DIR</code>, <code>TMP</code> and the <code>CAKE_CORE_INCLUDE_PATH</code> constants.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;ROOT&#39;</span><span class="p">,</span> <span class="nb">dirname</span><span class="p">(</span><span class="nb">dirname</span><span class="p">(</span><span class="k">__FILE__</span><span class="p">)));</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;APP_DIR&#39;</span><span class="p">,</span> <span class="s1">&#39;app&#39;</span><span class="p">);</span> <span class="c1">// I define this as a string because why not right?</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;TMP&#39;</span><span class="p">,</span> <span class="nx">ROOT</span> <span class="o">.</span> <span class="nx">DS</span> <span class="o">.</span> <span class="s1">&#39;tmp&#39;</span> <span class="o">.</span> <span class="nx">DS</span><span class="p">);</span>
</span><span class='line'><span class="nb">define</span><span class="p">(</span><span class="s1">&#39;CAKE_CORE_INCLUDE_PATH&#39;</span><span class="p">,</span> <span class="nx">ROOT</span> <span class="o">.</span> <span class="nx">DS</span> <span class="o">.</span> <span class="s1">&#39;vendor&#39;</span> <span class="o">.</span> <span class="nx">DS</span> <span class="o">.</span> <span class="s1">&#39;cakephp&#39;</span> <span class="o">.</span> <span class="nx">DS</span> <span class="o">.</span> <span class="s1">&#39;cakephp&#39;</span> <span class="o">.</span> <span class="nx">DS</span> <span class="o">.</span> <span class="s1">&#39;lib&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p><strong>app/Console/cake.php</strong><br/>
So that the console commands can still find the right lib, we need to update the include path here too.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nb">ini_set</span><span class="p">(</span><span class="s1">&#39;include_path&#39;</span><span class="p">,</span> <span class="s1">&#39;..&#39;</span> <span class="o">.</span> <span class="nv">$ds</span> <span class="o">.</span> <span class="s1">&#39;vendor&#39;</span> <span class="o">.</span> <span class="nv">$ds</span> <span class="o">.</span> <span class="s1">&#39;cakephp&#39;</span> <span class="o">.</span> <span class="nv">$ds</span> <span class="o">.</span> <span class="s1">&#39;cakephp&#39;</span> <span class="o">.</span> <span class="nv">$ds</span> <span class="o">.</span> <span class="s1">&#39;lib&#39;</span> <span class="o">.</span> <span class="nx">PATH_SEPARATOR</span> <span class="o">.</span> <span class="nb">ini_get</span><span class="p">(</span><span class="s1">&#39;include_path&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you are running your shell tasks from within <code>app</code> we can use a relative path.</p>

<h4>Edit your bootstrap to build the new paths</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// app/config/bootstrap.php</span>
</span><span class='line'><span class="nx">App</span><span class="o">::</span><span class="na">build</span><span class="p">(</span>
</span><span class='line'>  <span class="p">[</span>
</span><span class='line'>      <span class="s1">&#39;Plugin&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nx">ROOT</span> <span class="o">.</span> <span class="s1">&#39;/Plugin/&#39;</span><span class="p">,</span> <span class="nx">ROOT</span> <span class="o">.</span> <span class="s1">&#39;/app/Plugin/&#39;</span><span class="p">],</span>
</span><span class='line'>      <span class="s1">&#39;Vendor&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="nx">ROOT</span> <span class="o">.</span> <span class="s1">&#39;/vendor/&#39;</span><span class="p">,</span> <span class="nx">ROOT</span> <span class="o">.</span> <span class="s1">&#39;/app/Vendor/&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>  <span class="nx">App</span><span class="o">::</span><span class="na">RESET</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Testing</h4>

<p>To check that the new setup is working you can run a <code>Console/cake</code> to check what the <code>core</code> value is.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span><span class="nb">cd </span>app
</span><span class='line'><span class="nv">$ </span>Console/cake
</span><span class='line'>
</span><span class='line'>Welcome to CakePHP v2.5.3 Console
</span><span class='line'>---------------------------------------------------------------
</span><span class='line'>App : app
</span><span class='line'>Path: /Users/david/Sites/example/app/
</span><span class='line'>---------------------------------------------------------------
</span><span class='line'>Current Paths:
</span><span class='line'>
</span><span class='line'> -app: app
</span><span class='line'> -working: /Users/david/Sites/example/app
</span><span class='line'> -root: /Users/david/Sites/example
</span><span class='line'> -core: /Users/david/Sites/example/vendor/cakephp/cakephp/lib
</span></code></pre></td></tr></table></div></figure>


<h3>Done!</h3>

<p>Feel free to delete your old <code>lib</code> folder as you now don&rsquo;t need it. Have fun updating your applications version of CakePHP using Composer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a CakePHP project using Composer]]></title>
    <link href="http://jedistirfry.co.uk/blog/2014-05/cakephp-project-from-scratch-using-composer/"/>
    <updated>2014-05-28T11:47:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2014-05/cakephp-project-from-scratch-using-composer</id>
    <content type="html"><![CDATA[<h3>Scenario</h3>

<p>I want to start a new CakePHP project, but I don&rsquo;t want to download anything. Ideally I want to create my application with the framework as a dependancy.</p>

<h3>Solution</h3>

<p>So firstly you&rsquo;ll want to create yourself a project folder. For this example we&rsquo;ll create a project to adopt a cat.
We need to create ourself a project folder, make it into a Git repo so we can version our code, and then we can start adding our dependancies.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir KittyMarket
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>KittyMarket
</span><span class='line'><span class="nv">$ </span>git init
</span><span class='line'><span class="nv">$ </span>composer init
</span></code></pre></td></tr></table></div></figure>


<p>So after the last command Composer will ask you about your project, so you can complete the details there. Be sure that you set your <code>"minimum-stability": "dev"</code> so that packages loading from <code>dev-master</code> will work.</p>

<p>Then you can start defining your dependancies. Firstly you&rsquo;ll want <code>cakephp/cakephp</code> and set a version of the latest, currently <code>2.5.1</code>.</p>

<p>After this I like to edit my <code>composer.json</code> to add some configuration, so that Composer will put things in the correct CakePHP place.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="s2">&quot;config&quot;</span><span class="err">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;vendor-dir&quot;</span><span class="p">:</span> <span class="s2">&quot;vendors&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;bin-dir&quot;</span><span class="p">:</span> <span class="s2">&quot;vendors/bin&quot;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once you&rsquo;ve added all your dependancies it&rsquo;s time to make the app. Be aware that the <code>../vendors/bin</code> might be different if you didn&rsquo;t use the above amend to your <code>composer.json</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>mkdir app
</span><span class='line'><span class="nv">$ </span><span class="nb">cd </span>app
</span><span class='line'><span class="nv">$ </span>../vendors/bin/cake bake
</span></code></pre></td></tr></table></div></figure>


<p>This will copy in the framework skeleton.</p>

<h3>Done!</h3>

<p>Make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Filtering dates using CakeDC/Search]]></title>
    <link href="http://jedistirfry.co.uk/blog/2014-03/filtering-dates-using-cakedc-slash-search/"/>
    <updated>2014-03-04T10:54:00+00:00</updated>
    <id>http://jedistirfry.co.uk/blog/2014-03/filtering-dates-using-cakedc-slash-search</id>
    <content type="html"><![CDATA[<h3>Scenario</h3>

<p>I needed to do a search on a date field in my database which was stored as a <code>DATE</code>, but only filtering by month.</p>

<h3>Solution</h3>

<p>So I had already implemented the <a href="https://github.com/cakedc/search">CakeDC/Search</a> into my project, so all I needed to do was create a custom method to return the right conditions for the query.</p>

<p>My model already had the <code>filterArgs</code> setup.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Setup default search filters</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @var array</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>  <span class="k">public</span> <span class="nv">$filterArgs</span> <span class="o">=</span> <span class="p">[</span>
</span><span class='line'>      <span class="s1">&#39;day_type_id&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;value&#39;</span><span class="p">],</span>
</span><span class='line'>        <span class="s1">&#39;month&#39;</span> <span class="o">=&gt;</span> <span class="p">[</span><span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;query&#39;</span><span class="p">,</span> <span class="s1">&#39;method&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;filterByMonth&#39;</span><span class="p">]</span>
</span><span class='line'>  <span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>So I just added a <code>type</code> of <code>query</code> and passed in a <code>method</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Filter the pagination by month</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @param array $data</span>
</span><span class='line'><span class="sd"> * @return array</span>
</span><span class='line'><span class="sd"> **/</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">filterByMonth</span><span class="p">(</span><span class="k">array</span> <span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">())</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="p">[</span>
</span><span class='line'>            <span class="s2">&quot;DATE_FORMAT(</span><span class="si">{</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">alias</span><span class="si">}</span><span class="s2">.date, &#39;%c&#39;)&quot;</span> <span class="o">=&gt;</span> <span class="p">(</span><span class="nx">int</span><span class="p">)</span><span class="nv">$data</span><span class="p">[</span><span class="s1">&#39;month&#39;</span><span class="p">]</span>
</span><span class='line'>        <span class="p">];</span>
</span><span class='line'>    <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>$data</code> array will contain all the fields setup in your model along with their values. So for me it looked like</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="p">[</span>
</span><span class='line'>    <span class="s1">&#39;day_type_id&#39;</span> <span class="o">=&gt;</span> <span class="mi">3</span><span class="p">,</span>
</span><span class='line'>    <span class="s1">&#39;month&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;08&#39;</span> <span class="c1">// Note the string type, hence why I cast to int</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Done!</h3>

<p>Make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Pagination Helper links]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-11/custom-pagination/"/>
    <updated>2013-11-27T11:00:00+00:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-11/custom-pagination</id>
    <content type="html"><![CDATA[<h3>Scenario</h3>

<p>You are paginating a set of records but you want to use a custom url for that specific filter. For me this was pagination a set of news articles by category.</p>

<p>The url I wanted to use was <code>/news/category/daves-awesome-category</code> and then paginating results on <code>/news/category/daves-awesome-category/page:3</code>. However the Paginator helper didn&rsquo;t want to play ball.</p>

<p>I had already created my route.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="nx">Router</span><span class="o">::</span><span class="na">connect</span><span class="p">(</span><span class="s1">&#39;/news/category/:category/*&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;controller&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;news_articles&#39;</span><span class="p">,</span> <span class="s1">&#39;action&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;index&#39;</span><span class="p">),</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;category&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;[a-z0-9-]+&#39;</span><span class="p">,</span> <span class="s1">&#39;pass&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;category&#39;</span><span class="p">)));</span>
</span></code></pre></td></tr></table></div></figure>


<p>But instead of the expected links above, I was getting <code>/news/daves-awesome-category/page:2</code> missing out my keyword from the url.</p>

<h3>Solution</h3>

<p>The Paginator helper options array to the rescue! You can actually configure the options of the helper right in the view. Such a simple fix.</p>

<p>Here is my pagination including the fix to adjust the url if a category is set.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$category</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>  <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Paginator</span><span class="o">-&gt;</span><span class="na">options</span><span class="p">[</span><span class="s1">&#39;url&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;controller&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;news_articles&#39;</span><span class="p">,</span> <span class="s1">&#39;action&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;index&#39;</span><span class="p">,</span> <span class="s1">&#39;category&#39;</span> <span class="o">=&gt;</span> <span class="nv">$category</span><span class="p">[</span><span class="s1">&#39;NewsCategory&#39;</span><span class="p">][</span><span class="s1">&#39;slug&#39;</span><span class="p">]);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Paginator</span><span class="o">-&gt;</span><span class="na">prev</span><span class="p">(</span><span class="s1">&#39;&lt; &#39;</span> <span class="o">.</span> <span class="nx">__</span><span class="p">(</span><span class="s1">&#39;previous&#39;</span><span class="p">),</span> <span class="k">array</span><span class="p">(),</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;class&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;prev disabled&#39;</span><span class="p">));</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Paginator</span><span class="o">-&gt;</span><span class="na">numbers</span><span class="p">(</span><span class="k">array</span><span class="p">(</span><span class="s1">&#39;separator&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;&#39;</span><span class="p">));</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Paginator</span><span class="o">-&gt;</span><span class="na">next</span><span class="p">(</span><span class="nx">__</span><span class="p">(</span><span class="s1">&#39;next&#39;</span><span class="p">)</span> <span class="o">.</span> <span class="s1">&#39; &gt;&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(),</span> <span class="k">null</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;class&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;next disabled&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Done!</h3>

<p>Make a brew, and probably have a biscuit too. Why not eh? You&rsquo;ve earned it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic validation in CakePHP]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-09/dynamic-validation/"/>
    <updated>2013-09-12T12:53:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-09/dynamic-validation</id>
    <content type="html"><![CDATA[<h3>The scenario</h3>

<p>You have two different forms which both submit data for the same model. Each of these forms has different fields, but both need to be validated before the data can be saved.</p>

<p>If you setup your model validation normally, both forms will fail to validate as they will be missing fields.</p>

<h3>Solution</h3>

<p>The method that I use to solve this is very simple. You can create two validation arrays and dynamically merge them together as and when you need them.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="c1">// Model/Post.php</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Setup the default rules here, these rules should be common to both forms </span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @var array $validate</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>  <span class="k">public</span> <span class="nv">$validate</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;title&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>              <span class="s1">&#39;rule&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;notEmpty&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Please enter a title&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;required&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span>
</span><span class='line'>          <span class="p">),</span>
</span><span class='line'>          <span class="s1">&#39;two&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>              <span class="s1">&#39;rule&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;minLength&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">),</span>
</span><span class='line'>              <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Title must be more than 10 characters&#39;</span>
</span><span class='line'>          <span class="p">)</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Validation rules for when editing a post</span>
</span><span class='line'><span class="sd"> * </span>
</span><span class='line'><span class="sd"> * @var array $validatePost</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>  <span class="k">public</span> <span class="nv">$validatePost</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;content&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>              <span class="s1">&#39;rule&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;notEmpty&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Please enter some content&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;required&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span>
</span><span class='line'>          <span class="p">)</span>
</span><span class='line'>      <span class="p">)</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Validate Author</span>
</span><span class='line'><span class="sd"> * </span>
</span><span class='line'><span class="sd"> * @var array $validateAuthor</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>  <span class="k">public</span> <span class="nv">$validateAuthor</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;author_id&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>              <span class="s1">&#39;rule&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;notEmpty&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Please select an Author&#39;</span><span class="p">,</span>
</span><span class='line'>              <span class="s1">&#39;required&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span>
</span><span class='line'>          <span class="p">)</span>
</span><span class='line'>      <span class="p">),</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Here we can check some conditions to see what validation we need</span>
</span><span class='line'><span class="sd"> * </span>
</span><span class='line'><span class="sd"> * @return boolean</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">beforeValidate</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// We might want to check data</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;Post&#39;</span><span class="p">][</span><span class="s1">&#39;author_id&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validate</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validateAuthor</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Maybe only on an edit action?</span>
</span><span class='line'>      <span class="c1">// We know it&#39;s edit because there is an id</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;Post&#39;</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validate</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validate</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validatePost</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">// Perhaps we want to add a single new rule for add using the validator?</span>
</span><span class='line'>      <span class="c1">// We know it&#39;s add because there is no id</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;Post&#39;</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">validator</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">add</span><span class="p">(</span><span class="s1">&#39;pubDate&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                  <span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                      <span class="s1">&#39;rule&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;datetime&#39;</span><span class="p">,</span> <span class="s1">&#39;ymd&#39;</span><span class="p">),</span>
</span><span class='line'>                      <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Publish date must be ymd&#39;</span>
</span><span class='line'>                  <span class="p">)</span>
</span><span class='line'>              <span class="p">)</span>
</span><span class='line'>          <span class="p">)</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>      <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So now our validation array will contain a dynamic selection of rules based on conditions we choose. I prefer to use the <code>array_merge()</code> method because I find the validation rules easier to read and maintain.</p>

<p>You can find out more about the <code>validator()</code> in the book. <a href="http://book.cakephp.org/2.0/en/models/data-validation.html#dynamically-change-validation-rules">Dynamically change validation rules</a></p>

<h3>Success</h3>

<p>Go and make a brew, you&rsquo;ve just done some dynamic validation. Right in the model too, exactly where it should be. ggwp.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Merging Admin specific helpers]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-09/merging-admin-specific-helpers/"/>
    <updated>2013-09-10T14:32:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-09/merging-admin-specific-helpers</id>
    <content type="html"><![CDATA[<h3>The scenario</h3>

<p>You have a bunch of helpers which you are only using in the <code>/admin</code> section of your website. We don&rsquo;t need to load these on the front-end part of the site.</p>

<h3>Solution</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="c1">// app/AppController.php</span>
</span><span class='line'>  <span class="k">public</span> <span class="nv">$helpers</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;Html&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;Form&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">public</span> <span class="nv">$adminHelpers</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;NiceAdmin.Actions&#39;</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;NiceAdmin.Boolean&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">beforeFilter</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">params</span><span class="p">[</span><span class="s1">&#39;admin&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">layout</span> <span class="o">=</span> <span class="s1">&#39;admin&#39;</span><span class="p">;</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">helpers</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">helpers</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">adminHelpers</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Success!</h3>

<p>Make a brew.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to create hasManyThrough multi-selects]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-08/how-to-create-hasmanythrough-multi-selects/"/>
    <updated>2013-08-13T16:29:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-08/how-to-create-hasmanythrough-multi-selects</id>
    <content type="html"><![CDATA[<p><strong>Updated 6th November 2013</strong></p>

<h3>The scenario</h3>

<p>In your CMS you have a HABTM relationship between two models, something like <code>Post</code> and <code>Tag</code>. However you want to store some extra data about the <code>Tag</code>, such as who created it. This means that the relationship between the two models will in fact need to be a <code>hasManyThrough</code> and use a join model. <a href="http://book.cakephp.org/2.0/en/models/associations-linking-models-together.html#hasmany-through-the-join-model">You can read more about this type of relationship in the CakePHP CookBook</a>.</p>

<p>You want to be able to select and save multiple tags when creating a <code>Post</code>. So the logical step here is to load a list of <code>Tag</code> items and display them in a multi-select element in our view.</p>

<p>The alternative scenario is using checkboxes to add a <code>hasMany</code> relation to a parent record.</p>

<h3>The problem</h3>

<p>When creating a multi-select there is no form field configuration which will allow the data to be formatted in a way which is compatible with any of the <code>save()</code> methods.</p>

<p>For example,
Setting up your form using a multi-select such as <code>$this-&gt;Form-&gt;input('tag_id', array('type' =&gt; 'select', 'multiple' =&gt; true))</code> will not allow you to numerically index your fields. This means that your data will look like the following.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>array (size=1)
</span><span class='line'>  'tag_id' =&gt; 
</span><span class='line'>    array (size=3)
</span><span class='line'>      0 =&gt; string '28' (length=2)
</span><span class='line'>      1 =&gt; string '29' (length=2)
</span><span class='line'>      2 =&gt; string '30' (length=2)</span></code></pre></td></tr></table></div></figure>


<p>However this isn&rsquo;t compatible, and must be transformed into a numerically indexed form such as this.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>array (size=3)
</span><span class='line'>  0 =&gt; 
</span><span class='line'>    array (size=1)
</span><span class='line'>      'tag_id' =&gt; string '28' (length=2)
</span><span class='line'>  1 =&gt; 
</span><span class='line'>    array (size=1)
</span><span class='line'>      'tag_id' =&gt; string '29' (length=2)
</span><span class='line'>  2 =&gt; 
</span><span class='line'>    array (size=1)
</span><span class='line'>      'tag_id' =&gt; string '30' (length=2)</span></code></pre></td></tr></table></div></figure>


<p>This new data format can now be assigned to your join model and saved using <code>saveAll()</code>. However the dependency isn&rsquo;t respected and as such, you need the hack for deleting the existing join model records as you can see below.</p>

<h3>Solution</h3>

<h4>The models</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Model/Post.php</span>
</span><span class='line'><span class="nv">$hasMany</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;PostsTag&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;className&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;PostsTag&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;foreignKey&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;post_id&#39;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Model/Tag.php</span>
</span><span class='line'><span class="nv">$hasMany</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;PostsTag&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;className&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;PostsTag&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;foreignKey&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;tag_id&#39;</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Model/PostsTag.php</span>
</span><span class='line'><span class="nv">$belongsTo</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;Post&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;className&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Post&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;foreignKey&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;post_id&#39;</span>
</span><span class='line'>  <span class="p">),</span>
</span><span class='line'>  <span class="s1">&#39;Tag&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;className&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Tag&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;foreignKey&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;tag_id&#39;</span>
</span><span class='line'>  <span class="p">),</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>The form in the view</h4>

<p>If you want to use a multi-select field here you can use the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Form</span><span class="o">-&gt;</span><span class="na">input</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;PostsTag.tag_id&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;select&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;multiple&#39;</span> <span class="o">=&gt;</span> <span class="k">true</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;selected&#39;</span> <span class="o">=&gt;</span> <span class="nx">Hash</span><span class="o">::</span><span class="na">extract</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;PostsTag&#39;</span><span class="p">],</span> <span class="s1">&#39;{n}.tag_id&#39;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you would like to use checkboxes instead you can change the Form Helper to use checkboxes.</p>

<p><strong>Important note</strong><br/>
If you are using checkboxes and want to validate your data you will need to ensure that the <code>hiddenField</code> option is not <strong>false</strong>. Otherwise the data will not appear in the data array and you will not be able to validate it.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">echo</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Form</span><span class="o">-&gt;</span><span class="na">input</span><span class="p">(</span>
</span><span class='line'>  <span class="s1">&#39;Post.tag_id&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="k">array</span><span class="p">(</span>
</span><span class='line'>      <span class="s1">&#39;multiple&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;checkbox&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="s1">&#39;options&#39;</span> <span class="o">=&gt;</span> <span class="nv">$tags</span> <span class="c1">// A list of tags fetched with $this-&gt;Post-&gt;Tag-&gt;find(&#39;list&#39;)</span>
</span><span class='line'>  <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>The controller except</h4>

<p>Controller method excerpt to show the usage of the function</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="c1">// Here we are massaging the data in order to transform it</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;PostsTag&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Post</span><span class="o">-&gt;</span><span class="na">PostsTag</span><span class="o">-&gt;</span><span class="na">massageHasManyForSaveAll</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;PostsTag&#39;</span><span class="p">],</span> <span class="s1">&#39;tag_id&#39;</span><span class="p">,</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;Post&#39;</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]);</span>
</span><span class='line'>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Post</span><span class="o">-&gt;</span><span class="na">saveAll</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">request</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>The AppModel hack</h4>

<p>In the AppModel we need to implement a hack to massage the data. You&rsquo;ll notice that we call it on the join model, as above. This is important as the join model will have the correct relationships beteween the two models. We can use this to our advantage to find out the related keys for the delete.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd">* Transform a set of hasMany multi-select data into a format which can be saved</span>
</span><span class='line'><span class="sd">* using saveAll in the controller</span>
</span><span class='line'><span class="sd">* </span>
</span><span class='line'><span class="sd">* @param array $data</span>
</span><span class='line'><span class="sd">* @param str $fieldToSave</span>
</span><span class='line'><span class="sd">* @param int $deleteId</span>
</span><span class='line'><span class="sd">* @return array</span>
</span><span class='line'><span class="sd">*/</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">massageHasManyForSaveAll</span><span class="p">(</span><span class="nv">$data</span><span class="p">,</span> <span class="nv">$fieldToSave</span><span class="p">,</span> <span class="nv">$deleteId</span> <span class="o">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">foreach</span> <span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">belongsTo</span> <span class="k">as</span> <span class="nv">$model</span> <span class="o">=&gt;</span> <span class="nv">$relationship</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nv">$relationship</span><span class="p">[</span><span class="s1">&#39;foreignKey&#39;</span><span class="p">]</span> <span class="o">!=</span> <span class="nv">$fieldToSave</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$relatedModel</span> <span class="o">=</span> <span class="nv">$model</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$relatedModelPrimaryKey</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="p">{</span><span class="nv">$model</span><span class="p">}</span><span class="o">-&gt;</span><span class="na">primaryKey</span><span class="p">;</span>
</span><span class='line'>          <span class="nv">$relatedForeignKey</span> <span class="o">=</span> <span class="nv">$relationship</span><span class="p">[</span><span class="s1">&#39;foreignKey&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nv">$deleteId</span> <span class="o">!==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">deleteAll</span><span class="p">(</span><span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">alias</span> <span class="o">.</span><span class="s1">&#39;.&#39;</span><span class="o">.</span> <span class="nv">$relatedForeignKey</span> <span class="o">=&gt;</span> <span class="nv">$deleteId</span>
</span><span class='line'>      <span class="p">));</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">if</span> <span class="p">(</span><span class="nb">is_array</span><span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="nv">$fieldToSave</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">foreach</span> <span class="p">(</span><span class="nv">$data</span><span class="p">[</span><span class="nv">$fieldToSave</span><span class="p">]</span> <span class="k">as</span> <span class="nv">$packageId</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$return</span><span class="p">[]</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="nv">$fieldToSave</span> <span class="o">=&gt;</span> <span class="nv">$packageId</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">return</span> <span class="nv">$return</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="nv">$data</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Success</h3>

<p>Make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use a Component to listen to Cake events]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-08/cake-events-system-listening/"/>
    <updated>2013-08-09T15:29:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-08/cake-events-system-listening</id>
    <content type="html"><![CDATA[<p>I wanted a sleek way to inject SEO meta tags into my project without a large overhead and lots of complicated finds and model joints. Thanks to <a href="https://github.com/lorenzo">jose_zap&rsquo;s</a> suggestion, I decided to learn about the <a href="http://book.cakephp.org/2.0/en/core-libraries/events.html">Cake Events</a> system.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Component to find and load seo data and inject it into the view</span>
</span><span class='line'><span class="sd"> *</span>
</span><span class='line'><span class="sd"> * @author David Yell &lt;neon1024@gmail.com&gt;</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>
</span><span class='line'><span class="nx">App</span><span class="o">::</span><span class="na">uses</span><span class="p">(</span><span class="s1">&#39;CakeEventListener&#39;</span><span class="p">,</span> <span class="s1">&#39;Event&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">App</span><span class="o">::</span><span class="na">uses</span><span class="p">(</span><span class="s1">&#39;CakeEvent&#39;</span><span class="p">,</span> <span class="s1">&#39;Event&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">SeoComponent</span> <span class="k">extends</span> <span class="nx">Component</span> <span class="k">implements</span> <span class="nx">CakeEventListener</span> <span class="p">{</span>
</span><span class='line'>  
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Setup the component</span>
</span><span class='line'><span class="sd"> * Called after the Controller::beforeFilter() and before the controller action</span>
</span><span class='line'><span class="sd"> * </span>
</span><span class='line'><span class="sd"> * @param Controller $controller</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">startup</span><span class="p">(</span><span class="nx">Controller</span> <span class="nv">$controller</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">parent</span><span class="o">::</span><span class="na">startup</span><span class="p">(</span><span class="nv">$controller</span><span class="p">);</span>
</span><span class='line'>      <span class="nv">$controller</span><span class="o">-&gt;</span><span class="na">getEventManager</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">attach</span><span class="p">(</span><span class="nv">$this</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * List of callable functions which are attached to system events</span>
</span><span class='line'><span class="sd"> * </span>
</span><span class='line'><span class="sd"> * @return array</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">implementedEvents</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>          <span class="s1">&#39;View.beforeLayout&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;writeSeo&#39;</span>
</span><span class='line'>      <span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Inject the seo data into the view</span>
</span><span class='line'><span class="sd"> * </span>
</span><span class='line'><span class="sd"> * @param CakeEvent $event</span>
</span><span class='line'><span class="sd"> * @return void</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">function</span> <span class="nf">writeSeo</span><span class="p">(</span><span class="nx">CakeEvent</span> <span class="nv">$event</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="c1">// Looking for vars set to the view isn&#39;t especially robust! This should probably call a behaviour method which goes and looks up data</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">viewVars</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">][</span><span class="s1">&#39;Content&#39;</span><span class="p">][</span><span class="s1">&#39;seo_title&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">viewVars</span><span class="p">[</span><span class="s1">&#39;title_for_layout&#39;</span><span class="p">]</span> <span class="o">=</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">viewVars</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">][</span><span class="s1">&#39;Content&#39;</span><span class="p">][</span><span class="s1">&#39;seo_title&#39;</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">viewVars</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">][</span><span class="s1">&#39;Content&#39;</span><span class="p">][</span><span class="s1">&#39;seo_description&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">Html</span><span class="o">-&gt;</span><span class="na">meta</span><span class="p">(</span><span class="s1">&#39;description&#39;</span><span class="p">,</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">viewVars</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">][</span><span class="s1">&#39;Content&#39;</span><span class="p">][</span><span class="s1">&#39;seo_description&#39;</span><span class="p">],</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;block&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;meta&#39;</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">viewVars</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">][</span><span class="s1">&#39;Content&#39;</span><span class="p">][</span><span class="s1">&#39;seo_keywords&#39;</span><span class="p">]))</span> <span class="p">{</span>
</span><span class='line'>          <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">Html</span><span class="o">-&gt;</span><span class="na">meta</span><span class="p">(</span><span class="s1">&#39;keywords&#39;</span><span class="p">,</span> <span class="nv">$event</span><span class="o">-&gt;</span><span class="na">subject</span><span class="p">()</span><span class="o">-&gt;</span><span class="na">viewVars</span><span class="p">[</span><span class="s1">&#39;content&#39;</span><span class="p">][</span><span class="s1">&#39;Content&#39;</span><span class="p">][</span><span class="s1">&#39;seo_keywords&#39;</span><span class="p">],</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;block&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;meta&#39;</span><span class="p">));</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Success</h3>

<p>Make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Third party libraries with CakePHP]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-08/third-party-libraries-with-cakephp/"/>
    <updated>2013-08-01T15:23:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-08/third-party-libraries-with-cakephp</id>
    <content type="html"><![CDATA[<p>I always struggle to include third party library files in my Cake project as they very often do not adhere to any coding standard such as <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-0.md">PSR0</a>.</p>

<h3>Where to put the files?</h3>

<p>Third party files should always go into your <code>Vendor</code> folder inside your project, if they are not loaded using Composer.</p>

<h3>How to load them?</h3>

<p><strong>Update, 6 March 2015</strong><br/>
One of the core developers for the framework <a href="http://stackoverflow.com/questions/8158129/loading-vendor-files-in-cakephp-2-0/8158269#8158269">advices against using the technique</a> I describe in this post. So I am amending the post to reflect this.</p>

<h4>Using require_once</h4>

<p>In order to include third party library files, you can use <code>require_once()</code>. The only complication is getting the correct path to use.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="c1">// To load app/Vendor/DavesLibrary/DavesClass.php</span>
</span><span class='line'><span class="k">require_once</span><span class="p">(</span><span class="nx">APP</span> <span class="o">.</span> <span class="s1">&#39;Vendor&#39;</span> <span class="o">.</span> <span class="nx">DS</span> <span class="o">.</span> <span class="s1">&#39;DavesLibrary&#39;</span> <span class="o">.</span> <span class="nx">DS</span> <span class="o">.</span> <span class="s1">&#39;DavesClass.php&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h4>The older way</h4>

<p>Usually you will want to use the <code>App</code> class to load your third party classes into your application using <code>App::import()</code>. The parameters of this in the api do not match the usage, which apparently is for backwards compatibility.</p>

<p><a href="http://book.cakephp.org/2.0/en/core-utility-libraries/app.html#including-files-with-app-import">The App class in the cookbook</a>.</p>

<p>The code will look like the following.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="nx">App</span><span class="o">::</span><span class="na">import</span><span class="p">(</span><span class="s1">&#39;Vendor&#39;</span><span class="p">,</span> <span class="s1">&#39;TheNameOfMyClass&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;file&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;DavesLibrary&#39;</span><span class="o">.</span><span class="nx">DS</span><span class="o">.</span><span class="s1">&#39;DavesClass.php&#39;</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// DavesLibrary/DavesClass.php</span>
</span><span class='line'><span class="k">class</span> <span class="nc">TheNameOfMyClass</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Importing a Vendor library from a plugin? No problem, use plugin.notation</span>
</span><span class='line'><span class="nx">App</span><span class="o">::</span><span class="na">import</span><span class="p">(</span><span class="s1">&#39;Vendor&#39;</span><span class="p">,</span> <span class="s1">&#39;DavesPlugin.TheNameOfMyClass&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;file&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;DavesLibrary&#39;</span><span class="o">.</span><span class="nx">DS</span><span class="o">.</span><span class="s1">&#39;DavesClass.php&#39;</span><span class="p">));</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Success</h3>

<p>Make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CakePHP config for Nginx]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-08/cakephp-config-for-nginx/"/>
    <updated>2013-08-01T15:17:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-08/cakephp-config-for-nginx</id>
    <content type="html"><![CDATA[<p>I always have trouble configuring Nginx with CakePHP as I&rsquo;m forever trying to add extra things to the config.</p>

<p>Here is an example config template.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">server</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">listen</span>   <span class="mi">80</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">server_name</span> <span class="s">example.dev</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># root directive should be global</span>
</span><span class='line'>    <span class="kn">root</span> <span class="s">/Users/david/Sites/example_website/webroot</span><span class="p">;</span>
</span><span class='line'>    <span class="c1"># If you are using a project with the `/app` folder, you&#39;ll need to uncomment the following</span>
</span><span class='line'>    <span class="c1"># root /Users/david/Sites/example_website/app/webroot;</span>
</span><span class='line'>    <span class="kn">access_log</span>     <span class="s">/usr/local/var/log/nginx/example.access_log</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">error_log</span>      <span class="s">/usr/local/var/log/nginx/example.error_log</span> <span class="s">debug</span><span class="p">;</span>
</span><span class='line'>    <span class="c1"># debug will logs lots, don&#39;t use this in production</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">location</span> <span class="s">/</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">index</span>  <span class="s">index.php</span> <span class="s">index.html</span> <span class="s">index.htm</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">try_files</span> <span class="nv">$uri</span> <span class="nv">$uri/</span> <span class="s">/index.php?</span><span class="nv">$uri&amp;$args</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="kn">location</span> <span class="p">~</span> <span class="sr">\.php(/|$)</span> <span class="p">{</span>
</span><span class='line'>        <span class="kn">fastcgi_pass</span>  <span class="n">127.0.0.1</span><span class="p">:</span><span class="mi">9001</span><span class="p">;</span>
</span><span class='line'>        <span class="c1"># I use port 9001 as I have XDebug on port 9000, but php-fpm uses 9000 as default</span>
</span><span class='line'>        <span class="kn">fastcgi_split_path_info</span> <span class="s">^(.+\.php)(/.*)</span>$<span class="p">;</span>
</span><span class='line'>        <span class="kn">include</span> <span class="s">fastcgi_params</span><span class="p">;</span>
</span><span class='line'>        <span class="kn">fastcgi_param</span>  <span class="s">SCRIPT_FILENAME</span>  <span class="nv">$document_root$fastcgi_script_name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Different finds in CakePHP]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-08/different-finds-in-cakephp/"/>
    <updated>2013-08-01T15:11:00+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-08/different-finds-in-cakephp</id>
    <content type="html"><![CDATA[<p>I had a reference for how to do different types of finds in CakePHP using the manual join method and the Containable or Linkable behaviours.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Using containable</span>
</span><span class='line'>
</span><span class='line'><span class="cm">The problem with this is that if Group doens&#39;t match, then it will just return a blank array</span>
</span><span class='line'><span class="cm">dimension, because containable is just going to join the arrays in php</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">User</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;first&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;contain&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;Group&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;Group.id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$groupId</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;User.id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$userId</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Using Linkable (https://github.com/lorenzo/linkable)</span>
</span><span class='line'>
</span><span class='line'><span class="cm">This will do the same as above, but force a join. So if group doesn&#39;t match, you won&#39;t even get a result</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">User</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;first&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;link&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;Group&#39;</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;User.id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$userId</span><span class="p">,</span>
</span><span class='line'>        <span class="s1">&#39;Group.id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$groupId</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">Using joins</span>
</span><span class='line'>
</span><span class='line'><span class="cm">This does the same as above, but obviously is a bigger find</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">User</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;first&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;joins&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;table&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;groups&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;alias&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Group&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;LEFT&#39;</span><span class="p">,</span>
</span><span class='line'>            <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;Group.id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$groupId</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;User.id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$userId</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm"> * Using Paginate with Containable</span>
</span><span class='line'><span class="cm"> */</span>
</span><span class='line'><span class="c1">// Load the component</span>
</span><span class='line'><span class="nv">$components</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;Paginator&#39;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// Paginate contained data</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Paginator</span><span class="o">-&gt;</span><span class="na">settings</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>    <span class="s1">&#39;contain&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;Group&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;Group.id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$groupId</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'>    <span class="p">),</span>
</span><span class='line'>    <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;User.id&#39;</span> <span class="o">=&gt;</span> <span class="nv">$userId</span>
</span><span class='line'>    <span class="p">)</span>
</span><span class='line'>    <span class="s1">&#39;limit&#39;</span> <span class="o">=&gt;</span> <span class="mi">10</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Paginator</span><span class="o">-&gt;</span><span class="na">paginate</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">User</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to display the history of a file in Git with diffs]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-06/git-file-history/"/>
    <updated>2013-06-11T10:43:25+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-06/git-file-history</id>
    <content type="html"><![CDATA[<h3>Use case</h3>

<p>You want to see all the changes which have been made to a single file in the project.</p>

<h3>References</h3>

<p>This was solved by a brighter mind than my own.<br/>
<a href="https://twitter.com/YellDavid/status/344398277275435008">Daniel Hofstetter ‏@dhofstet on Twitter</a></p>

<h3>Solution</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git log -p &lt;filename&gt;
</span></code></pre></td></tr></table></div></figure>


<p>If you are using the most excellent <a href="http://www.sourcetreeapp.com/">SourceTree</a> then you can select a file and go to <code>Actions</code> > <code>Log selected</code> to see a window of all the changes.</p>

<h3>Success</h3>

<p>Go make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hack to fix SoftDelete behaviour return in CakePHP]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-04/softdelete-return/"/>
    <updated>2013-04-16T10:43:25+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-04/softdelete-return</id>
    <content type="html"><![CDATA[<h3>Use case</h3>

<p>You have downloaded and installed the <a href="https://github.com/cakedc/utils">Utils.SoftDelete</a> behaviour, but when you delete an item the return is <code>false</code> because the behaviour has stopped the delete and run an update instead.</p>

<p>You still need to feedback to the user that the item has been deleted succesfully, ie, returning a <code>true</code>.</p>

<h3>References</h3>

<ul>
<li><a href="https://github.com/CakeDC/utils/issues/19">https://github.com/CakeDC/utils/issues/19</a></li>
<li><a href="https://groups.google.com/forum/?fromgroups=#!topic/cakephp-core/2vIZN8Sq8RE">cakephp-core › callbacks and returning true</a></li>
</ul>


<h3>Solution</h3>

<p>This is a solution that I&rsquo;ve written myself based on the solutions of Ceeram and Augusto Franzoia.</p>

<p>It will need to go into the <code>AppModel</code> of your application.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">public</span> <span class="k">function</span> <span class="nf">delete</span><span class="p">(</span><span class="nv">$id</span> <span class="o">=</span> <span class="k">null</span><span class="p">,</span> <span class="nv">$cascade</span> <span class="o">=</span> <span class="k">true</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$result</span> <span class="o">=</span> <span class="k">parent</span><span class="o">::</span><span class="na">delete</span><span class="p">(</span><span class="nv">$id</span><span class="p">,</span> <span class="nv">$cascade</span><span class="p">);</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="nv">$result</span> <span class="o">===</span> <span class="k">false</span> <span class="o">&amp;&amp;</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">Behaviors</span><span class="o">-&gt;</span><span class="na">enabled</span><span class="p">(</span><span class="s1">&#39;SoftDelete&#39;</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>       <span class="k">return</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">field</span><span class="p">(</span><span class="s1">&#39;deleted&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;deleted&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Success</h3>

<p>Go make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Only One validation for CakePHP]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-04/onlyone-cake-validation/"/>
    <updated>2013-04-06T10:43:25+01:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-04/onlyone-cake-validation</id>
    <content type="html"><![CDATA[<h3>Use case</h3>

<p>You want to set a default for a collection of items and you need to validate that there is only one default set in the collection.</p>

<h3>Setup</h3>

<p>I tend to use a <code>bool NOT NULL DEFAULT 0</code> field for this in the database. Then in my model I&rsquo;ll implement a custom validation function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="o">&lt;?</span><span class="nx">php</span>
</span><span class='line'><span class="k">public</span> <span class="nv">$validate</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>        <span class="s1">&#39;default&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="c1">// Name of the field</span>
</span><span class='line'>            <span class="s1">&#39;one&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span> <span class="c1">// The name of the rule</span>
</span><span class='line'>                <span class="s1">&#39;rule&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;onlyOne&#39;</span><span class="p">,</span> <span class="c1">// My custom validation</span>
</span><span class='line'>                <span class="s1">&#39;message&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Only one can be default. A default already exists&#39;</span><span class="p">,</span>
</span><span class='line'>                <span class="s1">&#39;required&#39;</span> <span class="o">=&gt;</span> <span class="k">false</span>
</span><span class='line'>            <span class="p">)</span>
</span><span class='line'>        <span class="p">)</span>
</span><span class='line'><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Checks to ensure that only one record has the default flag</span>
</span><span class='line'><span class="sd"> * @param array $check An array containing {field}=&gt;{value}</span>
</span><span class='line'><span class="sd"> * @return bool</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">onlyOne</span><span class="p">(</span><span class="nv">$check</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="c1">// If turning off default, we don&#39;t mind</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$check</span><span class="p">[</span><span class="s1">&#39;default&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// Find the current default</span>
</span><span class='line'>        <span class="nv">$default</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">find</span><span class="p">(</span><span class="s1">&#39;first&#39;</span><span class="p">,</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>            <span class="s1">&#39;conditions&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span>
</span><span class='line'>                <span class="s1">&#39;default&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>            <span class="p">),</span>
</span><span class='line'>            <span class="s1">&#39;fields&#39;</span> <span class="o">=&gt;</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;id&#39;</span><span class="p">,</span> <span class="s1">&#39;name&#39;</span><span class="p">)</span>
</span><span class='line'>            <span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// No default exists</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nv">$default</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// If we are updating the current default</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nv">$default</span><span class="p">[</span><span class="s1">&#39;Model&#39;</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">]</span> <span class="o">==</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">data</span><span class="p">[</span><span class="s1">&#39;Model&#39;</span><span class="p">][</span><span class="s1">&#39;id&#39;</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<h3>Success</h3>

<p>Go make a brew!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to debug routes in Symfony2]]></title>
    <link href="http://jedistirfry.co.uk/blog/2013-03/router-debugging-in-symfony/"/>
    <updated>2013-03-01T09:43:25+00:00</updated>
    <id>http://jedistirfry.co.uk/blog/2013-03/router-debugging-in-symfony</id>
    <content type="html"><![CDATA[<p>When choosing my type of routing in Symfony2, I wanted to avoid using XML as I&rsquo;ve been put off it by working with Magento, so that left YAML and Annotation.</p>

<p>I picked annotation as it looked neater, but I wanted to find out how to find a controller from a url.</p>

<h3>Trace a url back to a controller</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>app/console router:match /players/
</span><span class='line'>Route <span class="s2">&quot;players_index&quot;</span> matches
</span><span class='line'><span class="nv">$ </span>app/console router:debug players_index
</span><span class='line'><span class="o">[</span>router<span class="o">]</span> Route <span class="s2">&quot;players_index&quot;</span>
</span><span class='line'>Name         players_index
</span><span class='line'>Pattern      /players/
</span><span class='line'>Class        Symfony<span class="se">\C</span>omponent<span class="se">\R</span>outing<span class="se">\R</span>oute
</span><span class='line'>Defaults     _controller: PingPong<span class="se">\B</span>undle<span class="se">\P</span>layerBundle<span class="se">\C</span>ontroller<span class="se">\P</span>layersController::indexAction
</span><span class='line'>Requirements
</span><span class='line'>Options      compiler_class: Symfony<span class="se">\C</span>omponent<span class="se">\R</span>outing<span class="se">\R</span>outeCompiler
</span><span class='line'>Regex        <span class="c">#^/players/$#s</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will allow you to chase Controller annotated routes from the command line!</p>

<h3>Success</h3>

<p>Have a brew, you&rsquo;ve earned it.</p>
]]></content>
  </entry>
  
</feed>
